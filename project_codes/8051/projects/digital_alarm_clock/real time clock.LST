C51 COMPILER V9.52.0.0   REAL_TIME_CLOCK                                                   01/26/2015 09:52:30 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE REAL_TIME_CLOCK
OBJECT MODULE PLACED IN real time clock.OBJ
COMPILER INVOKED BY: G:\Program Files\Keil\C51\BIN\C51.EXE real time clock.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //PROG. Version 11.10.23.17
   2           
   3          // interfacing ds1307 with 80C51
   4           
   5          #include<reg51.h>
   6           
   7          /* pins used for external h/w */
   8           
   9          sbit RS=P0^0; //connect p0.0 to rs pin of lcd
  10           
  11          sbit EN=P0^1; //connect p0.1 to en pin of lcd
  12           
  13          sbit SCL=P1^4; //i2c clock pin
  14           
  15          sbit SDA=P1^5; //i2c data pin   
  16           
  17          sbit SET=P1^0; //set button pin
  18           
  19          sbit INR=P1^2; //increment button pin
  20           
  21          /* some required define(s)*/
  22           
  23          #define delay_us _nop_(); //generates 1 microsecond delay
  24           
  25          #define LCD P2 //port2 connected to LCD data pins
  26           
  27          #define SCLHIGH  SCL=1;
  28           
  29          #define SCLLOW   SCL=0;
  30           
  31          #define SDAHIGH  SDA=1;
  32           
  33          #define SDALOW   SDA=0;
  34           
  35          /*various functions used in whole program*/
  36           
  37          void _nop_(void);
  38           
  39          void init_lcd(void);
  40           
  41          void cmd_lcd(unsigned char);
  42           
  43          void write_lcd(unsigned char);
  44           
  45          void display_lcd(unsigned char *);
  46           
  47          void delay_ms(unsigned int); 
  48           
  49          void init_rtc(void);
  50           
  51          void set_rtc(void);
  52           
  53          void strt_msg(void);
  54           
  55          void start(void);
C51 COMPILER V9.52.0.0   REAL_TIME_CLOCK                                                   01/26/2015 09:52:30 PAGE 2   

  56           
  57          void stop(void);
  58           
  59          void send_byte(unsigned char);
  60           
  61          unsigned char receive_byte(unsigned char);
  62           
  63          void write_i2c(unsigned char,unsigned char,unsigned char);
  64           
  65          void set_value(void);
  66           
  67          void stpwtch(void);
  68           
  69          unsigned char read_i2c(unsigned char,unsigned char); 
  70           
  71          //Give time here to set initial values to ds 1307 as specified in timekeeper register 
  72          unsigned char clock[]={0x00,0x59,0x23,0x04,0x20,0x10,0x11};
  73          //clock[]={seconds,minutes,hours,day_of_week,date,month,year};
  74           
  75          unsigned char stp[]={0x00,0x00,0x00};
  76          //stopwatch initial value
  77           
  78          unsigned char *s[]={"SUN","MON","TUE","WED","THU","FRI","SAT"};
  79           
  80          unsigned char slave_ack,add=0,c,k,sas;
  81           
  82          unsigned int num;
  83           
  84           
  85          void main(void)
  86          {
  87   1      init_lcd();
  88   1       
  89   1      strt_msg();
  90   1       
  91   1      //COMMENT THIS SECTION WHILE TRANSFRING PROGRAM SECOND TIME IN H/W
  92   1      init_rtc();
  93   1       
  94   1      //always do this
  95   1      while(1)
  96   1      {
  97   2       
  98   2      if(SET==0)
  99   2      set_value();
 100   2       
 101   2      c=read_i2c(0xd0,0x02);//read hours register and display on LCD
 102   2      /* IMP rtc ds 1307 understands BCD no.sys. our 8051 uC understands HEX no.sys.
 103   2       and LCD requires ASCII data,,,,,,,,,,,,,,,,,,
 104   2       e.g. lets consider if data read from 1307 is 12 (BCD) i.e. 0001 0010 (BIN)
 105   2       so 8051 consider it as 18 (DECIMAL)
 106   2       x1=(18/16)+48=49(ASCII) i.e. lcd will show 1 and
 107   2       x2=(18%16)+48=50(ASCII) i.e. lcd will show 2
 108   2       i.e. 12 on lcd                                        */
 109   2      write_lcd((c/16)+48);
 110   2      write_lcd((c%16)+48);
 111   2      write_lcd(':');
 112   2      sas = c & 0x20;
 113   2       
 114   2       
 115   2      c=read_i2c(0xd0,0x01);//read minutes register and display on LCD
 116   2      write_lcd((c/16)+48);
 117   2      write_lcd((c%16)+48);
C51 COMPILER V9.52.0.0   REAL_TIME_CLOCK                                                   01/26/2015 09:52:30 PAGE 3   

 118   2      write_lcd(':');
 119   2       
 120   2      c=read_i2c(0xd0,0x00);//read seconds register and display on LCD
 121   2      write_lcd((c/16)+48);
 122   2      write_lcd((c%16)+48);
 123   2      write_lcd(' ');                         
 124   2       
 125   2      display_lcd(s[read_i2c(0xd0,0x03)]);//read day register and display 
 126   2      write_lcd(*s[read_i2c(0xd0,0x03)]);
 127   2       
 128   2      cmd_lcd(0xc0);// Go to starting position of 2nd line of LCD
 129   2       
 130   2      c=read_i2c(0xd0,0x04);//read date register and display on LCD
 131   2      write_lcd((c/16)+48);
 132   2      write_lcd((c%16)+48);
 133   2      write_lcd('/');
 134   2       
 135   2      c=read_i2c(0xd0,0x05);//read month register and display on LCD
 136   2      write_lcd((c/16)+48);
 137   2      write_lcd((c%16)+48);
 138   2      write_lcd('/');
 139   2       
 140   2      write_lcd('2'); //write 1st 2 digits of year bcoz only last 2 bits are stored in rtc
 141   2      write_lcd('0');
 142   2      c=read_i2c(0xd0,0x06);//read year register and display on LCD
 143   2      write_lcd((c/16)+48);
 144   2      write_lcd((c%16)+48);
 145   2       
 146   2      write_lcd(32);   //THIS SECTION SHOWS am/pm
 147   2      if(sas == 0x20)
 148   2      {
 149   3      display_lcd("AM");
 150   3      //write_lcd(49);
 151   3      }
 152   2      else
 153   2      {
 154   3      //write_lcd(48);
 155   3        display_lcd("PM");
 156   3      }
 157   2       
 158   2      delay_ms(110);
 159   2      cmd_lcd(0x01); // Go to starting position of 1st line of LCD 
 160   2      }
 161   1          
 162   1      }
 163           
 164           
 165           
 166          void start(void) //starts i2c, if both SCK & SDA are idle
 167          { 
 168   1      if(SCL==0) //check SCK. if SCK busy, return else SCK idle
 169   1      return;
 170   1      if(SDA==0) //check SDA. if SDA busy, return else SDA idle
 171   1      return;
 172   1       
 173   1      SDALOW //High to Low transition on data line SDA makes d start condition
 174   1      delay_us
 175   1       
 176   1      SCLLOW  //clock low   
 177   1      delay_us
 178   1      }
 179           
C51 COMPILER V9.52.0.0   REAL_TIME_CLOCK                                                   01/26/2015 09:52:30 PAGE 4   

 180           
 181          void stop(void) //stops i2c, releasing the bus
 182          {        
 183   1      SDALOW //data low
 184   1      SCLHIGH //clock high
 185   1      delay_us
 186   1      SDAHIGH //Low to High transition on data line SDA makes d stop condition
 187   1      delay_us
 188   1      }
 189           
 190           
 191          void send_byte(unsigned char c) //transmits one byte of data to i2c bus
 192          {
 193   1      unsigned mask=0x80;
 194   1      do   //transmits 8 bits
 195   1      {
 196   2      if(c&mask) //set data line accordingly(0 or 1)
 197   2      SDAHIGH //data high
 198   2      else
 199   2      SDALOW  //data low
 200   2       
 201   2      //generate colck
 202   2      SCLHIGH   //clock high
 203   2      delay_us
 204   2       
 205   2      SCLLOW   //clock low
 206   2      delay_us
 207   2       
 208   2      mask/=2;  //shift mask
 209   2      }while(mask>0);
 210   1       
 211   1      SDAHIGH  //release data line for acknowledge
 212   1      SCLHIGH  //send clock for acknowledge
 213   1      delay_us
 214   1      slave_ack=SDA; //read data pin for acknowledge
 215   1      SCLLOW  //clock low
 216   1      delay_us
 217   1      }
 218           
 219          unsigned char receive_byte(unsigned char master_ack) //receives one byte of data from i2c bus
 220          {
 221   1      unsigned char c=0,mask=0x80;
 222   1      do   //receive 8 bits
 223   1      {
 224   2      SCLHIGH //clock high
 225   2      delay_us
 226   2       
 227   2      if(SDA==1) //read data
 228   2      c|=mask;    //store data
 229   2         SCLLOW   //clock low
 230   2         delay_us
 231   2         mask/=2; //shift mask
 232   2      }while(mask>0);
 233   1       
 234   1      if(master_ack==1)
 235   1      SDAHIGH //don't acknowledge
 236   1      else
 237   1      SDALOW //acknowledge
 238   1       
 239   1          SCLHIGH //clock high
 240   1          delay_us
 241   1         
C51 COMPILER V9.52.0.0   REAL_TIME_CLOCK                                                   01/26/2015 09:52:30 PAGE 5   

 242   1          SCLLOW //clock low
 243   1          delay_us
 244   1       
 245   1      SDAHIGH //data high
 246   1       
 247   1      return c;
 248   1      }
 249           
 250           
 251          void write_i2c(unsigned char device_id,unsigned char location,unsigned char c)
 252          //writes one byte of data(c) to slave device(device_id) at given address(location)
 253          {
 254   1      do
 255   1      {
 256   2      start();       //starts i2c bus
 257   2      send_byte(device_id);   //select slave device
 258   2      if(slave_ack==1)   //if acknowledge not received, stop i2c bus
 259   2      stop();
 260   2      }while(slave_ack==1); //loop until acknowledge is received
 261   1       
 262   1      send_byte(location); //send address location
 263   1      send_byte(c); //send data to i2c bus
 264   1      stop(); //stop i2c bus
 265   1      }
 266           
 267           
 268          unsigned char read_i2c(unsigned char device_id,unsigned char location)
 269          //reads one byte of data(c) from slave device(device_id) at given address(location)
 270          {
 271   1      unsigned char c;
 272   1      do
 273   1      {
 274   2      start();   //starts i2c bus  
 275   2      send_byte(device_id); //select slave device
 276   2      if(slave_ack==1) //if acknowledge not received, stop i2c bus
 277   2      stop();
 278   2      }while(slave_ack==1); //loop until acknowledge is received
 279   1       
 280   1      send_byte(location);  //send address location     
 281   1      stop(); //stop i2c bus
 282   1      start(); //starts i2c bus  
 283   1      send_byte(device_id+1); //select slave device in read mode
 284   1      c=receive_byte(1); //receive data from i2c bus
 285   1      stop(); //stop i2c bus
 286   1      return c;
 287   1      }
 288           
 289           
 290          void init_lcd(void)
 291          //initialize lcd
 292          {                           
 293   1      delay_ms(10); //delay 10 milliseconds
 294   1       
 295   1      cmd_lcd(0x0e); //lcd on, cursor on
 296   1      delay_ms(10);
 297   1       
 298   1      cmd_lcd(0x38); //8 bit initialize, 5x7 character font, 16x2 display
 299   1      delay_ms(10);
 300   1       
 301   1      cmd_lcd(0x06); //right shift cursor automatically after each character is displayed
 302   1      delay_ms(10);
 303   1       
C51 COMPILER V9.52.0.0   REAL_TIME_CLOCK                                                   01/26/2015 09:52:30 PAGE 6   

 304   1      cmd_lcd(0x01); //clear lcd
 305   1      delay_ms(10);
 306   1       
 307   1      cmd_lcd (0x80);
 308   1      }
 309           
 310           
 311          void cmd_lcd(unsigned char c)
 312          //transmit command or instruction to lcd
 313          {
 314   1      EN=1;
 315   1      RS=0; //clear register select pin
 316   1      LCD=c; //load 8 bit data
 317   1      EN=0; //clear enable pin
 318   1      delay_ms(2); //delay 2 milliseconds
 319   1      }
 320           
 321           
 322          void write_lcd(unsigned char c)
 323          //transmit a character to be displayed on lcd
 324          {
 325   1      EN=1; //set enable pin
 326   1      RS=1; //set register select pin
 327   1      LCD=c;  //load 8 bit data
 328   1      EN=0; //clear enable pin
 329   1      delay_ms(2); //delay 2 milliseconds
 330   1      }
 331           
 332           
 333          void display_lcd(unsigned char *s)
 334          //transmit a string to be displayed on lcd
 335          {
 336   1      while(*s)
 337   1      write_lcd(*s++);
 338   1      }
 339           
 340           
 341          void delay_ms(unsigned int i)
 342          //generates delay in milli seconds
 343          {
 344   1      unsigned int j;
 345   1      while(i-->0)
 346   1      {
 347   2      for(j=0;j<500;j++)
 348   2      {
 349   3          ;
 350   3      }
 351   2      }
 352   1      }   
 353           
 354           
 355          void set_value(void)
 356          //this function used for setting time using SET & INC buttons or pins
 357          {
 358   1      cmd_lcd(0x80);
 359   1      display_lcd("WELCOME TO TIME");
 360   1      cmd_lcd(0xC0);
 361   1      display_lcd(" SET WIZARD !!!");
 362   1      delay_ms(300);
 363   1      cmd_lcd(0x01);
 364   1      cmd_lcd(0x80);
 365   1      display_lcd(" SET YOUR RTC ?");
C51 COMPILER V9.52.0.0   REAL_TIME_CLOCK                                                   01/26/2015 09:52:30 PAGE 7   

 366   1      cmd_lcd(0xC0);
 367   1      display_lcd("YES        NEXT");
 368   1      while(1)
 369   1      {
 370   2      if(SET==0)
 371   2      {
 372   3      set_rtc();
 373   3      break;
 374   3      }
 375   2      if(INR==0)
 376   2      {
 377   3      cmd_lcd(0x01);
 378   3      stpwtch();
 379   3      break;
 380   3      }
 381   2      }
 382   1      }
 383           
 384          void init_rtc()
 385          {
 386   1      while(add<=6)   //update real time clock ic i.e. ds1307 with time
 387   1      {
 388   2      write_i2c(0xd0,add,clock[add]);
 389   2      add++;
 390   2      }
 391   1      }
 392           
 393          void strt_msg()
 394          {
 395   1      unsigned int i,j=0;
 396   1      display_lcd("Welcome to RTC");
 397   1      cmd_lcd(0xc0);
 398   1      display_lcd("<<<<<<<<>>>>>>>");
 399   1      delay_ms(300);   //"...(#@#@#)..."
 400   1      cmd_lcd(0x01);
 401   1      display_lcd("SKIP INTRODUCTION");
 402   1      cmd_lcd(0xc0);
 403   1      display_lcd("YES           NO");
 404   1      while(1)
 405   1      {
 406   2      if(SET==0)
 407   2      {
 408   3      delay_ms(40);
 409   3      break;
 410   3      }
 411   2      if(i==1000)
 412   2      {
 413   3      j++;
 414   3      i=0;
 415   3      }
 416   2      if(INR==0|j==100)
 417   2      {
 418   3      cmd_lcd(0x01);
 419   3      display_lcd("THIS PROJECT IS");
 420   3      cmd_lcd(0xc0);
 421   3      display_lcd("DONE BY T.E. ELN");
 422   3      delay_ms(500);
 423   3      cmd_lcd(0x01);
 424   3      display_lcd("<ROLL NO> <NAME>");
 425   3      delay_ms(250);
 426   3      cmd_lcd(0x01);
 427   3      display_lcd("38 AVINASH PATIL");
C51 COMPILER V9.52.0.0   REAL_TIME_CLOCK                                                   01/26/2015 09:52:30 PAGE 8   

 428   3      cmd_lcd(0xc0);
 429   3      display_lcd("44 AMIT SALUNKHE");
 430   3      delay_ms(550);
 431   3      cmd_lcd(0x01);
 432   3      display_lcd("46 SWAPNIL SANKPAL");
 433   3      cmd_lcd(0xc0);
 434   3      display_lcd("48 SUMIT SHEKHAR");
 435   3      delay_ms(550);
 436   3      cmd_lcd(0x01);
 437   3      display_lcd("49 PRANAV SHINDE");
 438   3      delay_ms(300);
 439   3      cmd_lcd(0x01);
 440   3      display_lcd("STARTING RTC....");
 441   3      cmd_lcd(0xC0);
 442   3      for(i=0;i<17;i++)
 443   3      {
 444   4      display_lcd(".");
 445   4      delay_ms(15);
 446   4      }
 447   3      break;
 448   3      }
 449   2      i++;
 450   2      }
 451   1      cmd_lcd(0x01);
 452   1      }
 453           
 454          void set_rtc()
 455          {
 456   1          unsigned char cnt=0x00;
 457   1      unsigned char q,p,i=0x00;
 458   1      while(1)
 459   1      {
 460   2      if(SET==0x00)
 461   2      {
 462   3      cnt++;
 463   3      delay_ms(50);
 464   3      cmd_lcd(0x01); // Go to starting position of 1st line of LCD 
 465   3      cmd_lcd(0xc0);
 466   3      display_lcd("NEXT     INC");
 467   3      cmd_lcd(0x80);
 468   3      switch(cnt)
 469   3      {
 470   4      case 1:
 471   4        display_lcd("Minutes:");
 472   4      break;
 473   4      case 2:
 474   4        display_lcd("Hours  :");
 475   4      break;
 476   4      case 3:
 477   4        display_lcd("Day    :");
 478   4      break;
 479   4      case 4:
 480   4        display_lcd("Date   :");
 481   4      break;
 482   4      case 5:
 483   4        display_lcd("Month  :");
 484   4      break;
 485   4        case 6:
 486   4        display_lcd("Year   :");
 487   4      }
 488   3      }
 489   2      if(INR==0)
C51 COMPILER V9.52.0.0   REAL_TIME_CLOCK                                                   01/26/2015 09:52:30 PAGE 9   

 490   2      break;
 491   2      if(cnt>6)
 492   2      return;
 493   2      }
 494   1      cmd_lcd(0xc0);
 495   1      display_lcd("SAVE     INC");
 496   1      while(1)
 497   1      {  if(INR==0)
 498   2       {
 499   3            delay_ms(10);   
 500   3        cmd_lcd(0x8A); // Go to starting position of 2nd line of LCD 
 501   3        p++;
 502   3        delay_ms(20);
 503   3         switch(cnt)
 504   3      {
 505   4      case 1:
 506   4      if(p>59)
 507   4      {
 508   5        p=0;
 509   5      }
 510   4      break;
 511   4      case 2:
 512   4        if(p>23)
 513   4      {
 514   5        p=0;
 515   5      }
 516   4         break;
 517   4      case 3:
 518   4        if(p>7)
 519   4      {
 520   5        p=0;
 521   5      }
 522   4      break;
 523   4      case 4:
 524   4        if(p>31)
 525   4      {
 526   5        p=0;
 527   5      }
 528   4      break;
 529   4      case 5:
 530   4        if(p>12)
 531   4      {
 532   5        p=0;
 533   5      }
 534   4             break;
 535   4        case 6:
 536   4        if(p>99)
 537   4      {
 538   5        p=0;
 539   5      }
 540   4      }   
 541   3        q=(p/10)<<4;
 542   3        q=q|(p%10);
 543   3        write_lcd((q/16)+48);
 544   3        write_lcd((q%16)+48);
 545   3       }
 546   2      if(SET==0)
 547   2        break;
 548   2      }
 549   1      write_i2c(0xD0,cnt,q);
 550   1      cmd_lcd(0x01);
 551   1      display_lcd("SAVING CHAGES");
C51 COMPILER V9.52.0.0   REAL_TIME_CLOCK                                                   01/26/2015 09:52:30 PAGE 10  

 552   1      cmd_lcd(0xc0);
 553   1      display_lcd("PLEASE WAIT");
 554   1      // delay_ms(100);
 555   1      for(i=0;i<6;i++)
 556   1      {
 557   2      display_lcd(".");
 558   2      delay_ms(40);
 559   2      }
 560   1      cmd_lcd(0x01);
 561   1      }
 562           
 563           


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1378    ----
   CONSTANT SIZE    =    426    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     38      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
