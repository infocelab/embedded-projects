
AVRASM ver. 2.1.30  C:\Users\pc\Desktop\pwm based dc motor control\List\pwm.asm Sat Mar 28 20:47:38 2015

                 
                 
                 ;CodeVisionAVR C Compiler V2.04.6 Evaluation
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega8
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c012      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 __RESET:
000013 94f8      	CLI
000014 27ee      	CLR  R30
000015 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000016 e0f1      	LDI  R31,1
000017 bffb      	OUT  GICR,R31
000018 bfeb      	OUT  GICR,R30
000019 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00001a e1f8      	LDI  R31,0x18
00001b bdf1      	OUT  WDTCR,R31
00001c bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00001d e08d      	LDI  R24,(14-2)+1
00001e e0a2      	LDI  R26,2
00001f 27bb      	CLR  R27
                 __CLEAR_REG:
000020 93ed      	ST   X+,R30
000021 958a      	DEC  R24
000022 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000023 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000024 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000025 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000026 93ed      	ST   X+,R30
000027 9701      	SBIW R24,1
000028 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;STACK POINTER INITIALIZATION
000029 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00002a bfed      	OUT  SPL,R30
00002b e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00002c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00002d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00002e e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00002f c02a      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;//********************************************************
                 ;//   *********** PWM DC MOTOR CONTROL *************
                 ;//********************************************************
                 ;//Controller:    ATmega8 (1MHz internal Crystal)
                 ;//Compiler:        CodeVision
                 ;//Author:        CC Dharmani, Chennai(India)
                 ;//Date:            Nov 2008
                 ;//********************************************************
                 ;//this program uses two of the three PWM channels (OC1A & OC1B)
                 ;//of the ATmega8, for controlling speed & direction of DC motor
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;/* quartz crystal frequency [Hz] */
                 ;#define xtal 1000000L
                 ;
                 ;#define increaseButton_PRESSED             !(PIND & 0x40)
                 ;#define increaseButton_OPEN                      (PIND & 0x40)
                 ;#define decreaseButton_PRESSED             !(PIND & 0x80)
                 ;#define decreaseButton_OPEN                      (PIND & 0x80)
                 ;#define DIRECTION_FORWARD                   !(PIND & 0x20)
                 ;#define DIRECTION_REVERSE                    (PIND & 0x20)
                 ;#define STOP_MOTOR                            TCCR1B = 0x00; TCCR1A = 0x00
                 ;#define START_MOTOR                            TCCR1B = 0x09
                 ;#define set_FORWARD                            TCCR1A = 0x21
                 ;#define set_REVERSE                            TCCR1A = 0x81
                 ;
                 ;//defining macros for setting minimum and maximum PWM counter values
                 ;//and step-size for controlling the voltage applied to MOSFETs base
                 ;#define COUNTER_LOWER_LIMIT                    0x0090
                 ;#define COUNTER_UPPER_LIMIT                    0x00f8
                 ;#define    STEP_SIZE                            0x0008
                 ;
                 ;void port_init(void)
                 ; 0000 0023 {
                 
                 	.CSEG
                 _port_init:
                 ; 0000 0024  PORTB = 0x00;
000030 e0e0      	LDI  R30,LOW(0)
000031 bbe8      	OUT  0x18,R30
                 ; 0000 0025  DDRB  = 0x06; //PWM pins OC1A & OC1B defined as outputs
000032 e0e6      	LDI  R30,LOW(6)
000033 bbe7      	OUT  0x17,R30
                 ; 0000 0026  PORTC = 0x00;
000034 e0e0      	LDI  R30,LOW(0)
000035 bbe5      	OUT  0x15,R30
                 ; 0000 0027  DDRC  = 0x00;
000036 bbe4      	OUT  0x14,R30
                 ; 0000 0028  PORTD = 0xE0; //internal pull-up enabled for three pins connected to switches
000037 eee0      	LDI  R30,LOW(224)
000038 bbe2      	OUT  0x12,R30
                 ; 0000 0029  DDRD  = 0x00;
000039 e0e0      	LDI  R30,LOW(0)
00003a bbe1      	OUT  0x11,R30
                 ; 0000 002A }
00003b 9508      	RET
                 ;
                 ;//TIMER1 initialize - prescale:1
                 ;//PWM Frequency: 1KHz
                 ;void timer1_init(void)
                 ; 0000 002F {
                 _timer1_init:
                 ; 0000 0030  TCCR1B = 0x00; //stop
00003c e0e0      	LDI  R30,LOW(0)
00003d bdee      	OUT  0x2E,R30
                 ; 0000 0031  TCNT1H = 0xFC; //setup
00003e efec      	LDI  R30,LOW(252)
00003f bded      	OUT  0x2D,R30
                 ; 0000 0032  TCNT1L = 0x18;
000040 e1e8      	LDI  R30,LOW(24)
000041 bdec      	OUT  0x2C,R30
                 ; 0000 0033  OCR1A  = COUNTER_LOWER_LIMIT;
000042 e9e0      	LDI  R30,LOW(144)
000043 e0f0      	LDI  R31,HIGH(144)
000044 bdfb      	OUT  0x2A+1,R31
000045 bdea      	OUT  0x2A,R30
                 ; 0000 0034  OCR1B  = COUNTER_LOWER_LIMIT;
000046 bdf9      	OUT  0x28+1,R31
000047 bde8      	OUT  0x28,R30
                 ; 0000 0035  ICR1H  = 0x03;
000048 e0e3      	LDI  R30,LOW(3)
000049 bde7      	OUT  0x27,R30
                 ; 0000 0036  ICR1L  = 0xE8;
00004a eee8      	LDI  R30,LOW(232)
00004b bde6      	OUT  0x26,R30
                 ; 0000 0037  TCCR1A = 0x81; //set forward; OC1A connected, OC1B disconnected
00004c e8e1      	LDI  R30,LOW(129)
00004d bdef      	OUT  0x2F,R30
                 ; 0000 0038  TCCR1B = 0x09; //start Timer
00004e e0e9      	LDI  R30,LOW(9)
00004f bdee      	OUT  0x2E,R30
                 ; 0000 0039 }
000050 9508      	RET
                 ;
                 ;//call this routine to initialize all peripherals
                 ;void init_devices(void)
                 ; 0000 003D {
                 _init_devices:
                 ; 0000 003E  #asm("cli");//stop errant interrupts until set up
000051 94f8      	cli
                 ; 0000 003F  //disable all interrupts
                 ; 0000 0040  port_init();
000052 dfdd      	RCALL _port_init
                 ; 0000 0041  timer1_init();
000053 dfe8      	RCALL _timer1_init
                 ; 0000 0042 
                 ; 0000 0043  MCUCR = 0x00;
000054 e0e0      	LDI  R30,LOW(0)
000055 bfe5      	OUT  0x35,R30
                 ; 0000 0044  GICR  = 0x00;
000056 bfeb      	OUT  0x3B,R30
                 ; 0000 0045  TIMSK = 0x00; //timer interrupt sources
000057 bfe9      	OUT  0x39,R30
                 ; 0000 0046  #asm("sei"); //re-enable interrupts
000058 9478      	sei
                 ; 0000 0047  //all peripherals are now initialized
                 ; 0000 0048 }
000059 9508      	RET
                 ;
                 ;
                 ;//************************ main ***************************
                 ;
                 ;void main(void)
                 ; 0000 004E {
                 _main:
                 ; 0000 004F  unsigned int counter = COUNTER_LOWER_LIMIT;
                 ; 0000 0050  unsigned char dir = 0, dir1 = 0;
                 ; 0000 0051 
                 ; 0000 0052  init_devices();
                 ;	counter -> R16,R17
                 ;	dir -> R19
                 ;	dir1 -> R18
                +
00005a e900     +LDI R16 , LOW ( 144 )
00005b e010     +LDI R17 , HIGH ( 144 )
                 	__GETWRN 16,17,144
00005c e030      	LDI  R19,0
00005d e020      	LDI  R18,0
00005e dff2      	RCALL _init_devices
                 ; 0000 0053 
                 ; 0000 0054  while(1)
                 _0x3:
                 ; 0000 0055  {
                 ; 0000 0056    CHECK_PB:
                 _0x6:
                 ; 0000 0057    while(increaseButton_OPEN && decreaseButton_OPEN)
                 _0x7:
00005f 9b86      	SBIS 0x10,6
000060 c002      	RJMP _0xA
000061 9987      	SBIC 0x10,7
000062 c001      	RJMP _0xB
                 _0xA:
000063 c017      	RJMP _0x9
                 _0xB:
                 ; 0000 0058    {                             //loop here until any push-button is pressed
                 ; 0000 0059      if(DIRECTION_FORWARD)        //check for Direction control switch status
000064 9985      	SBIC 0x10,5
000065 c002      	RJMP _0xC
                 ; 0000 005A           dir = 0;
000066 e030      	LDI  R19,LOW(0)
                 ; 0000 005B       else
000067 c001      	RJMP _0xD
                 _0xC:
                 ; 0000 005C           dir = 1;
000068 e031      	LDI  R19,LOW(1)
                 ; 0000 005D       if(dir != dir1)            //chenge direction if switch position has changed
                 _0xD:
000069 1723      	CP   R18,R19
00006a f079      	BREQ _0xE
                 ; 0000 005E       {
                 ; 0000 005F           STOP_MOTOR;
00006b e0e0      	LDI  R30,LOW(0)
00006c bdee      	OUT  0x2E,R30
00006d bdef      	OUT  0x2F,R30
                 ; 0000 0060           delay_ms(500);
00006e efe4      	LDI  R30,LOW(500)
00006f e0f1      	LDI  R31,HIGH(500)
000070 d031      	RCALL SUBOPT_0x0
                 ; 0000 0061           if(dir == 0)
000071 3030      	CPI  R19,0
000072 f411      	BRNE _0xF
                 ; 0000 0062          set_FORWARD;
000073 e2e1      	LDI  R30,LOW(33)
000074 c001      	RJMP _0x20
                 ; 0000 0063           else
                 _0xF:
                 ; 0000 0064          set_REVERSE;
000075 e8e1      	LDI  R30,LOW(129)
                 _0x20:
000076 bdef      	OUT  0x2F,R30
                 ; 0000 0065           START_MOTOR;
000077 e0e9      	LDI  R30,LOW(9)
000078 bdee      	OUT  0x2E,R30
                 ; 0000 0066        dir1 = dir;
000079 2f23      	MOV  R18,R19
                 ; 0000 0067      }
                 ; 0000 0068    }
                 _0xE:
00007a cfe4      	RJMP _0x7
                 _0x9:
                 ; 0000 0069 
                 ; 0000 006A    if(increaseButton_PRESSED)            //Speed-increase push-button is pressed
00007b 9986      	SBIC 0x10,6
00007c c010      	RJMP _0x11
                 ; 0000 006B    {
                 ; 0000 006C      delay_ms(20);                          //key debouncing delay after key-pressed
00007d d027      	RCALL SUBOPT_0x1
                 ; 0000 006D      if(increaseButton_OPEN) goto CHECK_PB;
00007e 9986      	SBIC 0x10,6
00007f cfdf      	RJMP _0x6
                 ; 0000 006E      while(increaseButton_PRESSED);      //wait here till the push-button is kept pressed
                 _0x13:
000080 9b86      	SBIS 0x10,6
000081 cffe      	RJMP _0x13
                 ; 0000 006F      delay_ms(20);                        //key debouncing delay after key released
000082 d022      	RCALL SUBOPT_0x1
                 ; 0000 0070 
                 ; 0000 0071      if(counter >= COUNTER_UPPER_LIMIT) //if speed is already maximum, don't do anything
                +
000083 3f08     +CPI R16 , LOW ( 248 )
000084 e0e0     +LDI R30 , HIGH ( 248 )
000085 071e     +CPC R17 , R30
                 	__CPWRN 16,17,248
000086 f018      	BRLO _0x16
                 ; 0000 0072         counter = COUNTER_UPPER_LIMIT;
                +
000087 ef08     +LDI R16 , LOW ( 248 )
000088 e010     +LDI R17 , HIGH ( 248 )
                 	__GETWRN 16,17,248
                 ; 0000 0073      else
000089 c002      	RJMP _0x17
                 _0x16:
                 ; 0000 0074         counter += STEP_SIZE;              //increase speed by a fixed step
                +
00008a 5f08     +SUBI R16 , LOW ( - 8 )
00008b 4f1f     +SBCI R17 , HIGH ( - 8 )
                 	__ADDWRN 16,17,8
                 ; 0000 0075 
                 ; 0000 0076      OCR1A = counter;
                 _0x17:
00008c c00f      	RJMP _0x21
                 ; 0000 0077      OCR1B = counter;
                 ; 0000 0078    }
                 ; 0000 0079    else                                             //speed-decrease push-button is pressed
                 _0x11:
                 ; 0000 007A    {
                 ; 0000 007B      delay_ms(20);                          //key debouncing delay after key-pressed
00008d d017      	RCALL SUBOPT_0x1
                 ; 0000 007C      if(decreaseButton_OPEN) goto CHECK_PB;
00008e 9987      	SBIC 0x10,7
00008f cfcf      	RJMP _0x6
                 ; 0000 007D      while(decreaseButton_PRESSED);      //wait here till the push-button is kept pressed
                 _0x1A:
000090 9b87      	SBIS 0x10,7
000091 cffe      	RJMP _0x1A
                 ; 0000 007E      delay_ms(20);                        //key debouncing delay after key released
000092 d012      	RCALL SUBOPT_0x1
                 ; 0000 007F 
                 ; 0000 0080      if(counter <= COUNTER_LOWER_LIMIT)    //if speed is already minimum, don't do anything
                +
000093 3901     +CPI R16 , LOW ( 145 )
000094 e0e0     +LDI R30 , HIGH ( 145 )
000095 071e     +CPC R17 , R30
                 	__CPWRN 16,17,145
000096 f418      	BRSH _0x1D
                 ; 0000 0081         counter = COUNTER_LOWER_LIMIT;
                +
000097 e900     +LDI R16 , LOW ( 144 )
000098 e010     +LDI R17 , HIGH ( 144 )
                 	__GETWRN 16,17,144
                 ; 0000 0082      else
000099 c002      	RJMP _0x1E
                 _0x1D:
                 ; 0000 0083         counter -= STEP_SIZE;              //reduce speed by a fixed step
                +
00009a 5008     +SUBI R16 , LOW ( 8 )
00009b 4010     +SBCI R17 , HIGH ( 8 )
                 	__SUBWRN 16,17,8
                 ; 0000 0084 
                 ; 0000 0085      OCR1A = counter;
                 _0x1E:
                 _0x21:
                +
00009c bd1b     +OUT 42 + 1 , R17
00009d bd0a     +OUT 42 , R16
                 	__OUTWR 16,17,42
                 ; 0000 0086      OCR1B = counter;
                +
00009e bd19     +OUT 40 + 1 , R17
00009f bd08     +OUT 40 , R16
                 	__OUTWR 16,17,40
                 ; 0000 0087    }
                 ; 0000 0088 
                 ; 0000 0089  }
0000a0 cfbe      	RJMP _0x3
                 ; 0000 008A }
                 _0x1F:
0000a1 cfff      	RJMP _0x1F
                 ;
                 ;//******************************  END  ***************************************
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
0000a2 93fa      	ST   -Y,R31
0000a3 93ea      	ST   -Y,R30
0000a4 c003      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
0000a5 e1e4      	LDI  R30,LOW(20)
0000a6 e0f0      	LDI  R31,HIGH(20)
0000a7 cffa      	RJMP SUBOPT_0x0
                 
                 
                 	.CSEG
                 _delay_ms:
0000a8 91e9      	ld   r30,y+
0000a9 91f9      	ld   r31,y+
0000aa 9630      	adiw r30,0
0000ab f039      	breq __delay_ms1
                 __delay_ms0:
                +
0000ac ed80     +LDI R24 , LOW ( 0x7D0 )
0000ad e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0000ae 9701     +SBIW R24 , 1
0000af f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0000b0 95a8      	wdr
0000b1 9731      	sbiw r30,1
0000b2 f7c9      	brne __delay_ms0
                 __delay_ms1:
0000b3 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   9 r17:   9 r18:   3 r19:   6 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   6 r25:   2 r26:   2 r27:   1 r28:   1 r29:   1 r30:  61 r31:  11 
x  :   2 y  :   4 z  :   0 
Registers used: 14 out of 35 (40.0%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   1 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :   5 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   0 
cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :   2 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 
cpc   :   2 cpi   :   3 cpse  :   0 dec   :   1 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :   0 ld    :   2 ldd   :   0 ldi   :  48 lds   :   0 lpm   :   0 
lsl   :   0 lsr   :   0 mov   :   1 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  36 
pop   :   0 push  :   0 rcall :   8 ret   :   4 reti  :   0 rjmp  :  39 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   2 sbi   :   0 sbic  :   5 
sbis  :   3 sbiw  :   3 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   0 
sts   :   0 sub   :   0 subi  :   2 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 26 out of 114 (22.8%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000168    360      0    360    8192   4.4%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
