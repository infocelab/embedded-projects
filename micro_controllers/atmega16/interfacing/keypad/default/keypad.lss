
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000003c4  00000438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a4  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000766  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000294  00000000  00000000  00000cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005b1  00000000  00000000  00000f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00001508  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000198  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000313  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001a53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  8a:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GetKeyPressed>:
   Precondition:
      None. Can be called without any setup.

   *******************************************/
   uint8_t GetKeyPressed()
   {
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
      uint8_t r,c;

      KEYPAD_PORT|= 0X0F;
  96:	8b b3       	in	r24, 0x1b	; 27
  98:	8f 60       	ori	r24, 0x0F	; 15
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	70 e0       	ldi	r23, 0x00	; 0

      for(c=0;c<3;c++)
      {
         KEYPAD_DDR&=~(0X7F);

         KEYPAD_DDR|=(0X40>>c);
  a0:	c0 e4       	ldi	r28, 0x40	; 64
  a2:	d0 e0       	ldi	r29, 0x00	; 0
         for(r=0;r<4;r++)
         {
            if(!(KEYPAD_PIN & (0X08>>r)))
  a4:	a8 e0       	ldi	r26, 0x08	; 8
  a6:	b0 e0       	ldi	r27, 0x00	; 0
   *******************************************/
   uint8_t GetKeyPressed()
   {
      uint8_t r,c;

      KEYPAD_PORT|= 0X0F;
  a8:	e6 2f       	mov	r30, r22

      for(c=0;c<3;c++)
      {
         KEYPAD_DDR&=~(0X7F);
  aa:	8a b3       	in	r24, 0x1a	; 26
  ac:	80 78       	andi	r24, 0x80	; 128
  ae:	8a bb       	out	0x1a, r24	; 26

         KEYPAD_DDR|=(0X40>>c);
  b0:	2a b3       	in	r18, 0x1a	; 26
  b2:	ce 01       	movw	r24, r28
  b4:	06 2e       	mov	r0, r22
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GetKeyPressed+0x2a>
  b8:	95 95       	asr	r25
  ba:	87 95       	ror	r24
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GetKeyPressed+0x26>
  c0:	28 2b       	or	r18, r24
  c2:	2a bb       	out	0x1a, r18	; 26
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	50 e0       	ldi	r21, 0x00	; 0
         for(r=0;r<4;r++)
         {
            if(!(KEYPAD_PIN & (0X08>>r)))
  c8:	89 b3       	in	r24, 0x19	; 25
  ca:	9d 01       	movw	r18, r26
  cc:	04 2e       	mov	r0, r20
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <GetKeyPressed+0x42>
  d0:	35 95       	asr	r19
  d2:	27 95       	ror	r18
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <GetKeyPressed+0x3e>
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	28 23       	and	r18, r24
  dc:	39 23       	and	r19, r25
  de:	23 2b       	or	r18, r19
  e0:	39 f4       	brne	.+14     	; 0xf0 <GetKeyPressed+0x5e>
            {
               return (r*3+c);
  e2:	ca 01       	movw	r24, r20
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	84 0f       	add	r24, r20
  ea:	95 1f       	adc	r25, r21
  ec:	8e 0f       	add	r24, r30
  ee:	0b c0       	rjmp	.+22     	; 0x106 <GetKeyPressed+0x74>
  f0:	4f 5f       	subi	r20, 0xFF	; 255
  f2:	5f 4f       	sbci	r21, 0xFF	; 255
      for(c=0;c<3;c++)
      {
         KEYPAD_DDR&=~(0X7F);

         KEYPAD_DDR|=(0X40>>c);
         for(r=0;r<4;r++)
  f4:	44 30       	cpi	r20, 0x04	; 4
  f6:	51 05       	cpc	r21, r1
  f8:	39 f7       	brne	.-50     	; 0xc8 <GetKeyPressed+0x36>
  fa:	6f 5f       	subi	r22, 0xFF	; 255
  fc:	7f 4f       	sbci	r23, 0xFF	; 255
   {
      uint8_t r,c;

      KEYPAD_PORT|= 0X0F;

      for(c=0;c<3;c++)
  fe:	63 30       	cpi	r22, 0x03	; 3
 100:	71 05       	cpc	r23, r1
 102:	91 f6       	brne	.-92     	; 0xa8 <GetKeyPressed+0x16>
 104:	8f ef       	ldi	r24, 0xFF	; 255
            }
         }
      }

      return 0XFF;//Indicate No key pressed
   }
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <main>:


   void main()
   {
 10c:	1f 93       	push	r17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x6>
      //Wait for LCD To Start
      _delay_loop_2(0);

      //Now initialize the module
      LCDInit(LS_NONE);
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCDInit>

      uint8_t key;

      while(1)
      {
         key=GetKeyPressed(); //Get the keycode of pressed key
 11c:	0e 94 49 00 	call	0x92	; 0x92 <GetKeyPressed>
 120:	18 2f       	mov	r17, r24

         LCDWriteIntXY(0,0,key,3);  //Print it at location 0,0 on LCD.
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDGotoXY>
 12a:	81 2f       	mov	r24, r17
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	63 e0       	ldi	r22, 0x03	; 3
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	0e 94 08 01 	call	0x210	; 0x210 <LCDWriteInt>
 136:	f2 cf       	rjmp	.-28     	; 0x11c <main+0x10>

00000138 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
 138:	87 b3       	in	r24, 0x17	; 23
 13a:	80 7f       	andi	r24, 0xF0	; 240
 13c:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
 13e:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
 140:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	8a 95       	dec	r24
 146:	f1 f7       	brne	.-4      	; 0x144 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	c4 9a       	sbi	0x18, 4	; 24
 14c:	82 2f       	mov	r24, r18
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 152:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 154:	82 95       	swap	r24
 156:	80 7f       	andi	r24, 0xF0	; 240
 158:	92 2f       	mov	r25, r18
 15a:	9a 95       	dec	r25
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 15e:	c4 98       	cbi	0x18, 4	; 24
 160:	92 2f       	mov	r25, r18
 162:	9a 95       	dec	r25
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 166:	c4 9a       	sbi	0x18, 4	; 24
 168:	92 2f       	mov	r25, r18
 16a:	9a 95       	dec	r25
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 16e:	96 b3       	in	r25, 0x16	; 22
 170:	92 2f       	mov	r25, r18
 172:	9a 95       	dec	r25
 174:	f1 f7       	brne	.-4      	; 0x172 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 176:	c4 98       	cbi	0x18, 4	; 24
 178:	92 2f       	mov	r25, r18
 17a:	9a 95       	dec	r25
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 17e:	87 fd       	sbrc	r24, 7
 180:	e4 cf       	rjmp	.-56     	; 0x14a <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 182:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 184:	87 b3       	in	r24, 0x17	; 23
 186:	8f 60       	ori	r24, 0x0F	; 15
 188:	87 bb       	out	0x17, r24	; 23

}
 18a:	08 95       	ret

0000018c <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
 18c:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 18e:	66 23       	and	r22, r22
 190:	11 f4       	brne	.+4      	; 0x196 <LCDByte+0xa>
	CLEAR_RS();
 192:	93 98       	cbi	0x12, 3	; 18
 194:	01 c0       	rjmp	.+2      	; 0x198 <LCDByte+0xc>
else
	SET_RS();
 196:	93 9a       	sbi	0x12, 3	; 18
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	82 2f       	mov	r24, r18
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 1a0:	c4 9a       	sbi	0x18, 4	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 1a2:	88 b3       	in	r24, 0x18	; 24
 1a4:	93 2f       	mov	r25, r19
 1a6:	92 95       	swap	r25
 1a8:	9f 70       	andi	r25, 0x0F	; 15
 1aa:	80 7f       	andi	r24, 0xF0	; 240
 1ac:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 1ae:	98 bb       	out	0x18, r25	; 24
 1b0:	82 2f       	mov	r24, r18
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 1b6:	c4 98       	cbi	0x18, 4	; 24
 1b8:	82 2f       	mov	r24, r18
 1ba:	8a 95       	dec	r24
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 1be:	c4 9a       	sbi	0x18, 4	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 1c0:	88 b3       	in	r24, 0x18	; 24
 1c2:	3f 70       	andi	r19, 0x0F	; 15
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	82 2f       	mov	r24, r18
 1cc:	8a 95       	dec	r24
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 1d0:	c4 98       	cbi	0x18, 4	; 24
 1d2:	2a 95       	dec	r18
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 1d6:	0e 94 9c 00 	call	0x138	; 0x138 <LCDBusyLoop>
}
 1da:	08 95       	ret

000001dc <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	ec 01       	movw	r28, r24
 1e2:	10 c0       	rjmp	.+32     	; 0x204 <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 1e4:	85 32       	cpi	r24, 0x25	; 37
 1e6:	51 f4       	brne	.+20     	; 0x1fc <LCDWriteString+0x20>
	{
		msg++;
 1e8:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 1ea:	88 81       	ld	r24, Y
 1ec:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 1ee:	88 30       	cpi	r24, 0x08	; 8
 1f0:	28 f0       	brcs	.+10     	; 0x1fc <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 1f2:	85 e2       	ldi	r24, 0x25	; 37
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDByte>
			LCDData(*msg);
 1fa:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDByte>
	}
	msg++;
 202:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 204:	88 81       	ld	r24, Y
 206:	88 23       	and	r24, r24
 208:	69 f7       	brne	.-38     	; 0x1e4 <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	df 93       	push	r29
 21a:	cf 93       	push	r28
 21c:	00 d0       	rcall	.+0      	; 0x21e <LCDWriteInt+0xe>
 21e:	00 d0       	rcall	.+0      	; 0x220 <LCDWriteInt+0x10>
 220:	0f 92       	push	r0
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	9c 01       	movw	r18, r24
 228:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 22a:	fe 01       	movw	r30, r28
 22c:	31 96       	adiw	r30, 0x01	; 1
 22e:	85 e0       	ldi	r24, 0x05	; 5
 230:	df 01       	movw	r26, r30
 232:	1d 92       	st	X+, r1
 234:	8a 95       	dec	r24
 236:	e9 f7       	brne	.-6      	; 0x232 <LCDWriteInt+0x22>
 238:	fe 01       	movw	r30, r28
 23a:	35 96       	adiw	r30, 0x05	; 5
 23c:	0d c0       	rjmp	.+26     	; 0x258 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 23e:	c9 01       	movw	r24, r18
 240:	6a e0       	ldi	r22, 0x0A	; 10
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	0e 94 b9 01 	call	0x372	; 0x372 <__divmodhi4>
 248:	80 83       	st	Z, r24
	val=val/10;
 24a:	c9 01       	movw	r24, r18
 24c:	6a e0       	ldi	r22, 0x0A	; 10
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	0e 94 b9 01 	call	0x372	; 0x372 <__divmodhi4>
 254:	9b 01       	movw	r18, r22
 256:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 258:	21 15       	cp	r18, r1
 25a:	31 05       	cpc	r19, r1
 25c:	81 f7       	brne	.-32     	; 0x23e <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 25e:	bf ef       	ldi	r27, 0xFF	; 255
 260:	0f 3f       	cpi	r16, 0xFF	; 255
 262:	1b 07       	cpc	r17, r27
 264:	79 f4       	brne	.+30     	; 0x284 <LCDWriteInt+0x74>
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 26a:	ae 01       	movw	r20, r28
 26c:	4f 5f       	subi	r20, 0xFF	; 255
 26e:	5f 4f       	sbci	r21, 0xFF	; 255
 270:	02 c0       	rjmp	.+4      	; 0x276 <LCDWriteInt+0x66>
 272:	2f 5f       	subi	r18, 0xFF	; 255
 274:	3f 4f       	sbci	r19, 0xFF	; 255
 276:	fa 01       	movw	r30, r20
 278:	e2 0f       	add	r30, r18
 27a:	f3 1f       	adc	r31, r19
 27c:	80 81       	ld	r24, Z
 27e:	88 23       	and	r24, r24
 280:	c1 f3       	breq	.-16     	; 0x272 <LCDWriteInt+0x62>
 282:	04 c0       	rjmp	.+8      	; 0x28c <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 284:	25 e0       	ldi	r18, 0x05	; 5
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	20 1b       	sub	r18, r16
 28a:	31 0b       	sbc	r19, r17
 28c:	7e 01       	movw	r14, r28
 28e:	08 94       	sec
 290:	e1 1c       	adc	r14, r1
 292:	f1 1c       	adc	r15, r1
 294:	e2 0e       	add	r14, r18
 296:	f3 1e       	adc	r15, r19
 298:	89 01       	movw	r16, r18
 29a:	09 c0       	rjmp	.+18     	; 0x2ae <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 29c:	f7 01       	movw	r30, r14
 29e:	81 91       	ld	r24, Z+
 2a0:	7f 01       	movw	r14, r30
 2a2:	80 5d       	subi	r24, 0xD0	; 208
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2aa:	0f 5f       	subi	r16, 0xFF	; 255
 2ac:	1f 4f       	sbci	r17, 0xFF	; 255
 2ae:	05 30       	cpi	r16, 0x05	; 5
 2b0:	11 05       	cpc	r17, r1
 2b2:	a4 f3       	brlt	.-24     	; 0x29c <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	cf 91       	pop	r28
 2c0:	df 91       	pop	r29
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	08 95       	ret

000002cc <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 2cc:	84 31       	cpi	r24, 0x14	; 20
 2ce:	78 f4       	brcc	.+30     	; 0x2ee <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 2d0:	62 30       	cpi	r22, 0x02	; 2
 2d2:	31 f0       	breq	.+12     	; 0x2e0 <LCDGotoXY+0x14>
 2d4:	63 30       	cpi	r22, 0x03	; 3
 2d6:	31 f0       	breq	.+12     	; 0x2e4 <LCDGotoXY+0x18>
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	29 f4       	brne	.+10     	; 0x2e6 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 2dc:	80 64       	ori	r24, 0x40	; 64
 2de:	03 c0       	rjmp	.+6      	; 0x2e6 <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 2e0:	8c 5e       	subi	r24, 0xEC	; 236
 2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 2e4:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 2e6:	80 68       	ori	r24, 0x80	; 128
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDByte>
 2ee:	08 95       	ret

000002f0 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2f8:	8c e4       	ldi	r24, 0x4C	; 76
 2fa:	9d e1       	ldi	r25, 0x1D	; 29
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCDInit+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 300:	87 b3       	in	r24, 0x17	; 23
 302:	8f 60       	ori	r24, 0x0F	; 15
 304:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 306:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 308:	8b 9a       	sbi	0x11, 3	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 30a:	8e 9a       	sbi	0x11, 6	; 17

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 30c:	88 b3       	in	r24, 0x18	; 24
 30e:	80 7f       	andi	r24, 0xF0	; 240
 310:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 312:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 314:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 316:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	98 2f       	mov	r25, r24
 31c:	9a 95       	dec	r25
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCDInit+0x2c>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 320:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 322:	c1 9a       	sbi	0x18, 1	; 24
 324:	98 2f       	mov	r25, r24
 326:	9a 95       	dec	r25
 328:	f1 f7       	brne	.-4      	; 0x326 <LCDInit+0x36>
	_delay_us(1);
	CLEAR_E();
 32a:	c4 98       	cbi	0x18, 4	; 24
 32c:	8a 95       	dec	r24
 32e:	f1 f7       	brne	.-4      	; 0x32c <LCDInit+0x3c>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 330:	0e 94 9c 00 	call	0x138	; 0x138 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 334:	81 2f       	mov	r24, r17
 336:	8c 60       	ori	r24, 0x0C	; 12
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 33e:	88 e2       	ldi	r24, 0x28	; 40
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 346:	80 e4       	ldi	r24, 0x40	; 64
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDByte>
 34e:	c0 e6       	ldi	r28, 0x60	; 96
 350:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 352:	89 91       	ld	r24, Y+
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	0e 94 c6 00 	call	0x18c	; 0x18c <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	c0 3a       	cpi	r28, 0xA0	; 160
 35e:	d8 07       	cpc	r29, r24
 360:	c1 f7       	brne	.-16     	; 0x352 <LCDInit+0x62>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCDGotoXY>

}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	08 95       	ret

00000372 <__divmodhi4>:
 372:	97 fb       	bst	r25, 7
 374:	09 2e       	mov	r0, r25
 376:	07 26       	eor	r0, r23
 378:	0a d0       	rcall	.+20     	; 0x38e <__divmodhi4_neg1>
 37a:	77 fd       	sbrc	r23, 7
 37c:	04 d0       	rcall	.+8      	; 0x386 <__divmodhi4_neg2>
 37e:	0c d0       	rcall	.+24     	; 0x398 <__udivmodhi4>
 380:	06 d0       	rcall	.+12     	; 0x38e <__divmodhi4_neg1>
 382:	00 20       	and	r0, r0
 384:	1a f4       	brpl	.+6      	; 0x38c <__divmodhi4_exit>

00000386 <__divmodhi4_neg2>:
 386:	70 95       	com	r23
 388:	61 95       	neg	r22
 38a:	7f 4f       	sbci	r23, 0xFF	; 255

0000038c <__divmodhi4_exit>:
 38c:	08 95       	ret

0000038e <__divmodhi4_neg1>:
 38e:	f6 f7       	brtc	.-4      	; 0x38c <__divmodhi4_exit>
 390:	90 95       	com	r25
 392:	81 95       	neg	r24
 394:	9f 4f       	sbci	r25, 0xFF	; 255
 396:	08 95       	ret

00000398 <__udivmodhi4>:
 398:	aa 1b       	sub	r26, r26
 39a:	bb 1b       	sub	r27, r27
 39c:	51 e1       	ldi	r21, 0x11	; 17
 39e:	07 c0       	rjmp	.+14     	; 0x3ae <__udivmodhi4_ep>

000003a0 <__udivmodhi4_loop>:
 3a0:	aa 1f       	adc	r26, r26
 3a2:	bb 1f       	adc	r27, r27
 3a4:	a6 17       	cp	r26, r22
 3a6:	b7 07       	cpc	r27, r23
 3a8:	10 f0       	brcs	.+4      	; 0x3ae <__udivmodhi4_ep>
 3aa:	a6 1b       	sub	r26, r22
 3ac:	b7 0b       	sbc	r27, r23

000003ae <__udivmodhi4_ep>:
 3ae:	88 1f       	adc	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	5a 95       	dec	r21
 3b4:	a9 f7       	brne	.-22     	; 0x3a0 <__udivmodhi4_loop>
 3b6:	80 95       	com	r24
 3b8:	90 95       	com	r25
 3ba:	bc 01       	movw	r22, r24
 3bc:	cd 01       	movw	r24, r26
 3be:	08 95       	ret

000003c0 <_exit>:
 3c0:	f8 94       	cli

000003c2 <__stop_program>:
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <__stop_program>
