
atmega16_with_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  000003f8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000092  00000000  00000000  00000536  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000077e  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000290  00000000  00000000  00000d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000061a  00000000  00000000  00000fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001bb  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000039f  00000000  00000000  0000183b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 3e       	cpi	r26, 0xEA	; 234
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa ee       	ldi	r26, 0xEA	; 234
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3e       	cpi	r26, 0xEA	; 234
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>

#include "lcd.h"

void main()
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	00 e0       	ldi	r16, 0x00	; 0
  9c:	10 e0       	ldi	r17, 0x00	; 0
   
    while(1)
   {

   //Initialize LCD module
   LCDInit(LS_BLINK|LS_ULINE);
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	0e 94 92 01 	call	0x324	; 0x324 <LCDInit>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	c8 01       	movw	r24, r16
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x16>
  
   for(i=0;i<10;i++) _delay_loop_2(0);
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	2a 30       	cpi	r18, 0x0A	; 10
  b0:	d1 f7       	brne	.-12     	; 0xa6 <main+0x14>
   //Clear the screen
   LCDClear();
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDByte>

   //Simple string printing
   LCDWriteStringXY(0,0,"Welcome to CELAB");
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	0e 94 80 01 	call	0x300	; 0x300 <LCDGotoXY>
  c2:	80 e6       	ldi	r24, 0x60	; 96
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 08 01 	call	0x210	; 0x210 <LCDWriteString>
   //LCDWriteString("Congrats ");

   //A string on line 2
   LCDWriteStringXY(0,1,"Loading ");
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	0e 94 80 01 	call	0x300	; 0x300 <LCDGotoXY>
  d2:	81 e7       	ldi	r24, 0x71	; 113
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 08 01 	call	0x210	; 0x210 <LCDWriteString>
  da:	c0 e0       	ldi	r28, 0x00	; 0
  dc:	d0 e0       	ldi	r29, 0x00	; 0

   //Print some numbers
   for (i=0;i<99;i+=1)
   {
      LCDWriteIntXY(9,1,i,3);
  de:	89 e0       	ldi	r24, 0x09	; 9
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	0e 94 80 01 	call	0x300	; 0x300 <LCDGotoXY>
  e6:	ce 01       	movw	r24, r28
  e8:	63 e0       	ldi	r22, 0x03	; 3
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	0e 94 22 01 	call	0x244	; 0x244 <LCDWriteInt>
      LCDWriteStringXY(12,1,"%");
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	0e 94 80 01 	call	0x300	; 0x300 <LCDGotoXY>
  f8:	8a e7       	ldi	r24, 0x7A	; 122
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 08 01 	call	0x210	; 0x210 <LCDWriteString>
 100:	c8 01       	movw	r24, r16
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x70>
 106:	21 96       	adiw	r28, 0x01	; 1

   //A string on line 2
   LCDWriteStringXY(0,1,"Loading ");

   //Print some numbers
   for (i=0;i<99;i+=1)
 108:	c3 36       	cpi	r28, 0x63	; 99
 10a:	d1 05       	cpc	r29, r1
 10c:	41 f7       	brne	.-48     	; 0xde <main+0x4c>
      _delay_loop_2(0);

   }

   //Clear the screen
   LCDClear();
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDByte>

   //Some more text

   LCDWriteString("Hello world");
 116:	8c e7       	ldi	r24, 0x7C	; 124
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 08 01 	call	0x210	; 0x210 <LCDWriteString>
   LCDWriteStringXY(0,1,"ComputronicsLab");    // <--- Write ur NAME HERE !!!!!!!!!!!
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	0e 94 80 01 	call	0x300	; 0x300 <LCDGotoXY>
 126:	88 e8       	ldi	r24, 0x88	; 136
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 08 01 	call	0x210	; 0x210 <LCDWriteString>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	c8 01       	movw	r24, r16
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0xa0>

   //Wait
  for(i=0;i<50;i++) _delay_loop_2(0);
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	22 33       	cpi	r18, 0x32	; 50
 13a:	d1 f7       	brne	.-12     	; 0x130 <main+0x9e>

   //Some More ......
   LCDClear();
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDByte>
   LCDWriteString("Computronics");
 144:	88 e9       	ldi	r24, 0x98	; 152
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 08 01 	call	0x210	; 0x210 <LCDWriteString>
   LCDWriteStringXY(0,1,"Lab");
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	0e 94 80 01 	call	0x300	; 0x300 <LCDGotoXY>
 154:	85 ea       	ldi	r24, 0xA5	; 165
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 08 01 	call	0x210	; 0x210 <LCDWriteString>
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	c8 01       	movw	r24, r16
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0xce>
   for(i=0;i<50;i++) _delay_loop_2(0);
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	22 33       	cpi	r18, 0x32	; 50
 168:	d1 f7       	brne	.-12     	; 0x15e <main+0xcc>
 16a:	99 cf       	rjmp	.-206    	; 0x9e <main+0xc>

0000016c <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
 16c:	87 b3       	in	r24, 0x17	; 23
 16e:	80 7f       	andi	r24, 0xF0	; 240
 170:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
 172:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
 174:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	8a 95       	dec	r24
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	c4 9a       	sbi	0x18, 4	; 24
 180:	82 2f       	mov	r24, r18
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 186:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 188:	82 95       	swap	r24
 18a:	80 7f       	andi	r24, 0xF0	; 240
 18c:	92 2f       	mov	r25, r18
 18e:	9a 95       	dec	r25
 190:	f1 f7       	brne	.-4      	; 0x18e <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 192:	c4 98       	cbi	0x18, 4	; 24
 194:	92 2f       	mov	r25, r18
 196:	9a 95       	dec	r25
 198:	f1 f7       	brne	.-4      	; 0x196 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 19a:	c4 9a       	sbi	0x18, 4	; 24
 19c:	92 2f       	mov	r25, r18
 19e:	9a 95       	dec	r25
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 1a2:	96 b3       	in	r25, 0x16	; 22
 1a4:	92 2f       	mov	r25, r18
 1a6:	9a 95       	dec	r25
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 1aa:	c4 98       	cbi	0x18, 4	; 24
 1ac:	92 2f       	mov	r25, r18
 1ae:	9a 95       	dec	r25
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 1b2:	87 fd       	sbrc	r24, 7
 1b4:	e4 cf       	rjmp	.-56     	; 0x17e <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 1b6:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 1b8:	87 b3       	in	r24, 0x17	; 23
 1ba:	8f 60       	ori	r24, 0x0F	; 15
 1bc:	87 bb       	out	0x17, r24	; 23

}
 1be:	08 95       	ret

000001c0 <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
 1c0:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 1c2:	66 23       	and	r22, r22
 1c4:	11 f4       	brne	.+4      	; 0x1ca <LCDByte+0xa>
	CLEAR_RS();
 1c6:	93 98       	cbi	0x12, 3	; 18
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <LCDByte+0xc>
else
	SET_RS();
 1ca:	93 9a       	sbi	0x12, 3	; 18
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	82 2f       	mov	r24, r18
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 1d4:	c4 9a       	sbi	0x18, 4	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 1d6:	88 b3       	in	r24, 0x18	; 24
 1d8:	93 2f       	mov	r25, r19
 1da:	92 95       	swap	r25
 1dc:	9f 70       	andi	r25, 0x0F	; 15
 1de:	80 7f       	andi	r24, 0xF0	; 240
 1e0:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 1e2:	98 bb       	out	0x18, r25	; 24
 1e4:	82 2f       	mov	r24, r18
 1e6:	8a 95       	dec	r24
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 1ea:	c4 98       	cbi	0x18, 4	; 24
 1ec:	82 2f       	mov	r24, r18
 1ee:	8a 95       	dec	r24
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 1f2:	c4 9a       	sbi	0x18, 4	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 1f4:	88 b3       	in	r24, 0x18	; 24
 1f6:	3f 70       	andi	r19, 0x0F	; 15
 1f8:	80 7f       	andi	r24, 0xF0	; 240
 1fa:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 1fc:	88 bb       	out	0x18, r24	; 24
 1fe:	82 2f       	mov	r24, r18
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 204:	c4 98       	cbi	0x18, 4	; 24
 206:	2a 95       	dec	r18
 208:	f1 f7       	brne	.-4      	; 0x206 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 20a:	0e 94 b6 00 	call	0x16c	; 0x16c <LCDBusyLoop>
}
 20e:	08 95       	ret

00000210 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ec 01       	movw	r28, r24
 216:	10 c0       	rjmp	.+32     	; 0x238 <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 218:	85 32       	cpi	r24, 0x25	; 37
 21a:	51 f4       	brne	.+20     	; 0x230 <LCDWriteString+0x20>
	{
		msg++;
 21c:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 21e:	88 81       	ld	r24, Y
 220:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 222:	88 30       	cpi	r24, 0x08	; 8
 224:	28 f0       	brcs	.+10     	; 0x230 <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 226:	85 e2       	ldi	r24, 0x25	; 37
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDByte>
			LCDData(*msg);
 22e:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDByte>
	}
	msg++;
 236:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 238:	88 81       	ld	r24, Y
 23a:	88 23       	and	r24, r24
 23c:	69 f7       	brne	.-38     	; 0x218 <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	df 93       	push	r29
 24e:	cf 93       	push	r28
 250:	00 d0       	rcall	.+0      	; 0x252 <LCDWriteInt+0xe>
 252:	00 d0       	rcall	.+0      	; 0x254 <LCDWriteInt+0x10>
 254:	0f 92       	push	r0
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	9c 01       	movw	r18, r24
 25c:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 25e:	fe 01       	movw	r30, r28
 260:	31 96       	adiw	r30, 0x01	; 1
 262:	85 e0       	ldi	r24, 0x05	; 5
 264:	df 01       	movw	r26, r30
 266:	1d 92       	st	X+, r1
 268:	8a 95       	dec	r24
 26a:	e9 f7       	brne	.-6      	; 0x266 <LCDWriteInt+0x22>
 26c:	fe 01       	movw	r30, r28
 26e:	35 96       	adiw	r30, 0x05	; 5
 270:	0d c0       	rjmp	.+26     	; 0x28c <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 272:	c9 01       	movw	r24, r18
 274:	6a e0       	ldi	r22, 0x0A	; 10
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__divmodhi4>
 27c:	80 83       	st	Z, r24
	val=val/10;
 27e:	c9 01       	movw	r24, r18
 280:	6a e0       	ldi	r22, 0x0A	; 10
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__divmodhi4>
 288:	9b 01       	movw	r18, r22
 28a:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 28c:	21 15       	cp	r18, r1
 28e:	31 05       	cpc	r19, r1
 290:	81 f7       	brne	.-32     	; 0x272 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 292:	bf ef       	ldi	r27, 0xFF	; 255
 294:	0f 3f       	cpi	r16, 0xFF	; 255
 296:	1b 07       	cpc	r17, r27
 298:	79 f4       	brne	.+30     	; 0x2b8 <LCDWriteInt+0x74>
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 29e:	ae 01       	movw	r20, r28
 2a0:	4f 5f       	subi	r20, 0xFF	; 255
 2a2:	5f 4f       	sbci	r21, 0xFF	; 255
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <LCDWriteInt+0x66>
 2a6:	2f 5f       	subi	r18, 0xFF	; 255
 2a8:	3f 4f       	sbci	r19, 0xFF	; 255
 2aa:	fa 01       	movw	r30, r20
 2ac:	e2 0f       	add	r30, r18
 2ae:	f3 1f       	adc	r31, r19
 2b0:	80 81       	ld	r24, Z
 2b2:	88 23       	and	r24, r24
 2b4:	c1 f3       	breq	.-16     	; 0x2a6 <LCDWriteInt+0x62>
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 2b8:	25 e0       	ldi	r18, 0x05	; 5
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	20 1b       	sub	r18, r16
 2be:	31 0b       	sbc	r19, r17
 2c0:	7e 01       	movw	r14, r28
 2c2:	08 94       	sec
 2c4:	e1 1c       	adc	r14, r1
 2c6:	f1 1c       	adc	r15, r1
 2c8:	e2 0e       	add	r14, r18
 2ca:	f3 1e       	adc	r15, r19
 2cc:	89 01       	movw	r16, r18
 2ce:	09 c0       	rjmp	.+18     	; 0x2e2 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2d0:	f7 01       	movw	r30, r14
 2d2:	81 91       	ld	r24, Z+
 2d4:	7f 01       	movw	r14, r30
 2d6:	80 5d       	subi	r24, 0xD0	; 208
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2de:	0f 5f       	subi	r16, 0xFF	; 255
 2e0:	1f 4f       	sbci	r17, 0xFF	; 255
 2e2:	05 30       	cpi	r16, 0x05	; 5
 2e4:	11 05       	cpc	r17, r1
 2e6:	a4 f3       	brlt	.-24     	; 0x2d0 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	cf 91       	pop	r28
 2f4:	df 91       	pop	r29
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	08 95       	ret

00000300 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 300:	84 31       	cpi	r24, 0x14	; 20
 302:	78 f4       	brcc	.+30     	; 0x322 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 304:	62 30       	cpi	r22, 0x02	; 2
 306:	31 f0       	breq	.+12     	; 0x314 <LCDGotoXY+0x14>
 308:	63 30       	cpi	r22, 0x03	; 3
 30a:	31 f0       	breq	.+12     	; 0x318 <LCDGotoXY+0x18>
 30c:	61 30       	cpi	r22, 0x01	; 1
 30e:	29 f4       	brne	.+10     	; 0x31a <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 310:	80 64       	ori	r24, 0x40	; 64
 312:	03 c0       	rjmp	.+6      	; 0x31a <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 314:	8c 5e       	subi	r24, 0xEC	; 236
 316:	01 c0       	rjmp	.+2      	; 0x31a <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 318:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 31a:	80 68       	ori	r24, 0x80	; 128
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDByte>
 322:	08 95       	ret

00000324 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 32c:	8c e4       	ldi	r24, 0x4C	; 76
 32e:	9d e1       	ldi	r25, 0x1D	; 29
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <LCDInit+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 334:	87 b3       	in	r24, 0x17	; 23
 336:	8f 60       	ori	r24, 0x0F	; 15
 338:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 33a:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 33c:	8b 9a       	sbi	0x11, 3	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 33e:	8e 9a       	sbi	0x11, 6	; 17

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 340:	88 b3       	in	r24, 0x18	; 24
 342:	80 7f       	andi	r24, 0xF0	; 240
 344:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 346:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 348:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 34a:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	98 2f       	mov	r25, r24
 350:	9a 95       	dec	r25
 352:	f1 f7       	brne	.-4      	; 0x350 <LCDInit+0x2c>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 354:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 356:	c1 9a       	sbi	0x18, 1	; 24
 358:	98 2f       	mov	r25, r24
 35a:	9a 95       	dec	r25
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCDInit+0x36>
	_delay_us(1);
	CLEAR_E();
 35e:	c4 98       	cbi	0x18, 4	; 24
 360:	8a 95       	dec	r24
 362:	f1 f7       	brne	.-4      	; 0x360 <LCDInit+0x3c>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 364:	0e 94 b6 00 	call	0x16c	; 0x16c <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 368:	81 2f       	mov	r24, r17
 36a:	8c 60       	ori	r24, 0x0C	; 12
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 372:	88 e2       	ldi	r24, 0x28	; 40
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 37a:	80 e4       	ldi	r24, 0x40	; 64
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDByte>
 382:	c9 ea       	ldi	r28, 0xA9	; 169
 384:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 386:	89 91       	ld	r24, Y+
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	c9 3e       	cpi	r28, 0xE9	; 233
 392:	d8 07       	cpc	r29, r24
 394:	c1 f7       	brne	.-16     	; 0x386 <LCDInit+0x62>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	0e 94 80 01 	call	0x300	; 0x300 <LCDGotoXY>

}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	08 95       	ret

000003a6 <__divmodhi4>:
 3a6:	97 fb       	bst	r25, 7
 3a8:	09 2e       	mov	r0, r25
 3aa:	07 26       	eor	r0, r23
 3ac:	0a d0       	rcall	.+20     	; 0x3c2 <__divmodhi4_neg1>
 3ae:	77 fd       	sbrc	r23, 7
 3b0:	04 d0       	rcall	.+8      	; 0x3ba <__divmodhi4_neg2>
 3b2:	0c d0       	rcall	.+24     	; 0x3cc <__udivmodhi4>
 3b4:	06 d0       	rcall	.+12     	; 0x3c2 <__divmodhi4_neg1>
 3b6:	00 20       	and	r0, r0
 3b8:	1a f4       	brpl	.+6      	; 0x3c0 <__divmodhi4_exit>

000003ba <__divmodhi4_neg2>:
 3ba:	70 95       	com	r23
 3bc:	61 95       	neg	r22
 3be:	7f 4f       	sbci	r23, 0xFF	; 255

000003c0 <__divmodhi4_exit>:
 3c0:	08 95       	ret

000003c2 <__divmodhi4_neg1>:
 3c2:	f6 f7       	brtc	.-4      	; 0x3c0 <__divmodhi4_exit>
 3c4:	90 95       	com	r25
 3c6:	81 95       	neg	r24
 3c8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ca:	08 95       	ret

000003cc <__udivmodhi4>:
 3cc:	aa 1b       	sub	r26, r26
 3ce:	bb 1b       	sub	r27, r27
 3d0:	51 e1       	ldi	r21, 0x11	; 17
 3d2:	07 c0       	rjmp	.+14     	; 0x3e2 <__udivmodhi4_ep>

000003d4 <__udivmodhi4_loop>:
 3d4:	aa 1f       	adc	r26, r26
 3d6:	bb 1f       	adc	r27, r27
 3d8:	a6 17       	cp	r26, r22
 3da:	b7 07       	cpc	r27, r23
 3dc:	10 f0       	brcs	.+4      	; 0x3e2 <__udivmodhi4_ep>
 3de:	a6 1b       	sub	r26, r22
 3e0:	b7 0b       	sbc	r27, r23

000003e2 <__udivmodhi4_ep>:
 3e2:	88 1f       	adc	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	5a 95       	dec	r21
 3e8:	a9 f7       	brne	.-22     	; 0x3d4 <__udivmodhi4_loop>
 3ea:	80 95       	com	r24
 3ec:	90 95       	com	r25
 3ee:	bc 01       	movw	r22, r24
 3f0:	cd 01       	movw	r24, r26
 3f2:	08 95       	ret

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
