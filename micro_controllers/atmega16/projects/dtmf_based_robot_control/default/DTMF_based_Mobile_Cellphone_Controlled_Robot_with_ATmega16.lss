
DTMF_based_Mobile_Cellphone_Controlled_Robot_with_ATmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000024d  00000000  00000000  000001ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000106  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000025b  00000000  00000000  000004fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000175  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000027f  00000000  00000000  000008f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include<util/delay.h>             /* _delay_ms (millisecond delay) and _delay_us (microsecond delay)*/
int main(void)
{
    int i;

	DDRD=0x00;                    /*All the 8 pins of PortD are declared as input (DTMF Decoder is connected)*/
  92:	11 ba       	out	0x11, r1	; 17
	
	DDRB=0x0f;                    /*PB0,PB1,PB2 and PB3 pins of PortB are declared as output ( i/p1,i/p2,i/p3,i/p4 pins of DC Motor Driver are connected )*/
  94:	8f e0       	ldi	r24, 0x0F	; 15
  96:	87 bb       	out	0x17, r24	; 23
	{
		mobile_input=PIND & 0x78;  /*Reading DTMF decoder output value and masking its lower 4 bits*/ 
		
		if(mobile_input == 0x08)  /*Checking DTMF values to move the robot in direction*/
		{
			PORTB=0x0A;           /* Robot will move in forward direction*/
  98:	aa e0       	ldi	r26, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	29 e1       	ldi	r18, 0x19	; 25
  9c:	30 e0       	ldi	r19, 0x00	; 0
			_delay_ms (2000);     /*give a two second delay*/
			
		}
		else if(mobile_input == 0x50)
		{
			PORTB=0x0f;           /*Robot will stop*/
  9e:	7f e0       	ldi	r23, 0x0F	; 15
			_delay_ms (2000);     /*give a two second delay*/
			
		}
		else if(mobile_input == 0x60)
		{
			PORTB=0x08;           /*Robot will move in Right direction*/
  a0:	68 e0       	ldi	r22, 0x08	; 8
			_delay_ms (2000);     /*give a two second delay*/
		
		}
		else if(mobile_input == 0x20)
		{
			PORTB=0x02;          /*Robot will move in left direction*/
  a2:	52 e0       	ldi	r21, 0x02	; 2
     		_delay_ms (2000);     /*give a two second delay*/
		
		}
		else if(mobile_input == 0x10)
		{
			PORTB=0x05;
  a4:	45 e0       	ldi	r20, 0x05	; 5
		
	unsigned char mobile_input;   /*Variable declarations*/
	         
	while(1)                      /*Start of infinite loop*/
	{
		mobile_input=PIND & 0x78;  /*Reading DTMF decoder output value and masking its lower 4 bits*/ 
  a6:	80 b3       	in	r24, 0x10	; 16
  a8:	88 77       	andi	r24, 0x78	; 120
		
		if(mobile_input == 0x08)  /*Checking DTMF values to move the robot in direction*/
  aa:	88 30       	cpi	r24, 0x08	; 8
  ac:	49 f4       	brne	.+18     	; 0xc0 <main+0x2e>
		{
			PORTB=0x0A;           /* Robot will move in forward direction*/
  ae:	a8 bb       	out	0x18, r26	; 24
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	9e e4       	ldi	r25, 0x4E	; 78
  b4:	f9 01       	movw	r30, r18
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  bc:	d9 f7       	brne	.-10     	; 0xb4 <main+0x22>
  be:	f3 cf       	rjmp	.-26     	; 0xa6 <main+0x14>
     		_delay_ms (2000);     /*give a two second delay*/
		
		}
		else if(mobile_input == 0x10)
  c0:	80 31       	cpi	r24, 0x10	; 16
  c2:	49 f4       	brne	.+18     	; 0xd6 <main+0x44>
		{
			PORTB=0x05;
  c4:	48 bb       	out	0x18, r20	; 24
  c6:	80 e2       	ldi	r24, 0x20	; 32
  c8:	9e e4       	ldi	r25, 0x4E	; 78
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d2:	d9 f7       	brne	.-10     	; 0xca <main+0x38>
  d4:	e8 cf       	rjmp	.-48     	; 0xa6 <main+0x14>
			/*Robot will move in backward direction*/
		
			_delay_ms (2000);     /*give a two second delay*/
		
		}
		else if(mobile_input == 0x20)
  d6:	80 32       	cpi	r24, 0x20	; 32
  d8:	49 f4       	brne	.+18     	; 0xec <main+0x5a>
		{
			PORTB=0x02;          /*Robot will move in left direction*/
  da:	58 bb       	out	0x18, r21	; 24
  dc:	80 e2       	ldi	r24, 0x20	; 32
  de:	9e e4       	ldi	r25, 0x4E	; 78
  e0:	f9 01       	movw	r30, r18
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e8:	d9 f7       	brne	.-10     	; 0xe0 <main+0x4e>
  ea:	dd cf       	rjmp	.-70     	; 0xa6 <main+0x14>
			_delay_ms (2000);     /*give a two second delay*/
			
		}
		else if(mobile_input == 0x60)
  ec:	80 36       	cpi	r24, 0x60	; 96
  ee:	49 f4       	brne	.+18     	; 0x102 <main+0x70>
		{
			PORTB=0x08;           /*Robot will move in Right direction*/
  f0:	68 bb       	out	0x18, r22	; 24
  f2:	80 e2       	ldi	r24, 0x20	; 32
  f4:	9e e4       	ldi	r25, 0x4E	; 78
  f6:	f9 01       	movw	r30, r18
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	d9 f7       	brne	.-10     	; 0xf6 <main+0x64>
 100:	d2 cf       	rjmp	.-92     	; 0xa6 <main+0x14>
			_delay_ms (2000);     /*give a two second delay*/
			
		}
		else if(mobile_input == 0x50)
 102:	80 35       	cpi	r24, 0x50	; 80
 104:	81 f6       	brne	.-96     	; 0xa6 <main+0x14>
		{
			PORTB=0x0f;           /*Robot will stop*/
 106:	78 bb       	out	0x18, r23	; 24
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	9e e4       	ldi	r25, 0x4E	; 78
 10c:	f9 01       	movw	r30, r18
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 112:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 114:	d9 f7       	brne	.-10     	; 0x10c <main+0x7a>
 116:	c7 cf       	rjmp	.-114    	; 0xa6 <main+0x14>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
