
GPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000051a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  0000051a  0000058e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  008000e6  000005a0  00000614  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000dd  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a67  00000000  00000000  00000711  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f0  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000637  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016a  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000338  00000000  00000000  00001b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00001ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 3e       	cpi	r26, 0xE6	; 230
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a6 ee       	ldi	r26, 0xE6	; 230
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 32       	cpi	r26, 0x21	; 33
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  8a:	0c 94 8b 02 	jmp	0x516	; 0x516 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WaitMs>:
	
}


void WaitMs(unsigned int ms)		
{
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  96:	48 eb       	ldi	r20, 0xB8	; 184
  98:	5b e0       	ldi	r21, 0x0B	; 11
  9a:	fa 01       	movw	r30, r20
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <WaitMs+0xa>
	unsigned int i;

	for(i=0;i<=ms;i++)
  a0:	2f 5f       	subi	r18, 0xFF	; 255
  a2:	3f 4f       	sbci	r19, 0xFF	; 255
  a4:	82 17       	cp	r24, r18
  a6:	93 07       	cpc	r25, r19
  a8:	c0 f7       	brcc	.-16     	; 0x9a <WaitMs+0x8>
	{
		_delay_ms(1);
	}
}
  aa:	08 95       	ret

000000ac <usart_init>:


 
void usart_init()
{
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	8a b9       	out	0x0a, r24	; 10

UCSRB =  (1 << RXEN) | (1 << TXEN);                    

// Use 8-bit character sizes
//UCSRC |= (1 << URSEL) | (1 << UCZS0) | (1 << UCZS1);   
UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);   
  b0:	80 b5       	in	r24, 0x20	; 32
  b2:	86 68       	ori	r24, 0x86	; 134
  b4:	80 bd       	out	0x20, r24	; 32

// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
UBRRL = BAUD_PRESCALE;  
  b6:	8d e4       	ldi	r24, 0x4D	; 77
  b8:	89 b9       	out	0x09, r24	; 9
                              
UBRRH = (BAUD_PRESCALE >> 8);                          
  ba:	10 bc       	out	0x20, r1	; 32

}
  bc:	08 95       	ret

000000be <usart_getch>:
 
 
unsigned int usart_getch()
{
  be:	5f 9b       	sbis	0x0b, 7	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <usart_getch>

while (!(UCSRA & (1 << RXC)));                          

return(UDR);                                            
  c2:	8c b1       	in	r24, 0x0c	; 12
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <usart_writech>:

void usart_writech(unsigned char data)
{
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <usart_writech>
 
 while(!(UCSRA & (1<<UDRE)));
 UDR = data;
  cc:	8c b9       	out	0x0c, r24	; 12
}
  ce:	08 95       	ret

000000d0 <usart_message>:

void usart_message(unsigned char *var) 
{
  d0:	fc 01       	movw	r30, r24
  d2:	04 c0       	rjmp	.+8      	; 0xdc <usart_message+0xc>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
  d4:	5d 9b       	sbis	0x0b, 5	; 11
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <usart_message+0x4>
 UDR = data;
  d8:	ec b9       	out	0x0c, r30	; 12
  da:	31 96       	adiw	r30, 0x01	; 1
}

void usart_message(unsigned char *var) 
{
int h;
while(*var)         
  dc:	80 81       	ld	r24, Z
  de:	88 23       	and	r24, r24
  e0:	c9 f7       	brne	.-14     	; 0xd4 <usart_message+0x4>
usart_writech(var++); // send message
for(h=0;h<=200;h++); 
}
  e2:	08 95       	ret

000000e4 <sendmessage>:
unsigned char deg = 0xB0;



void sendmessage(char msg[], char num[])
{ 
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	16 2f       	mov	r17, r22
  ee:	07 2f       	mov	r16, r23
 int i=0,j=0; 
 puts("AT+CMGF="); 
  f0:	80 e6       	ldi	r24, 0x60	; 96
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 2a 02 	call	0x454	; 0x454 <puts>
 putchar(49); // sends the ASCII value of '1' 
  f8:	81 e3       	ldi	r24, 0x31	; 49
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 23 02 	call	0x446	; 0x446 <putchar>
 puts("AT+CMGS="); 
 100:	89 e6       	ldi	r24, 0x69	; 105
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 2a 02 	call	0x454	; 0x454 <puts>
 putchar('\"'); 
 108:	82 e2       	ldi	r24, 0x22	; 34
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 23 02 	call	0x446	; 0x446 <putchar>
 110:	21 2f       	mov	r18, r17
 112:	30 2f       	mov	r19, r16
 114:	c9 01       	movw	r24, r18
 116:	ec 01       	movw	r28, r24
 118:	03 c0       	rjmp	.+6      	; 0x120 <sendmessage+0x3c>
 while(num[i]!='\0') 
 { 
 j=(int)num[i];  putchar(j); //sends the ASCII values of the numbers
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 23 02 	call	0x446	; 0x446 <putchar>
 int i=0,j=0; 
 puts("AT+CMGF="); 
 putchar(49); // sends the ASCII value of '1' 
 puts("AT+CMGS="); 
 putchar('\"'); 
 while(num[i]!='\0') 
 120:	89 91       	ld	r24, Y+
 122:	88 23       	and	r24, r24
 124:	d1 f7       	brne	.-12     	; 0x11a <sendmessage+0x36>
 { 
 j=(int)num[i];  putchar(j); //sends the ASCII values of the numbers
 i++;
 } 
 puts("Hello World"); 
 126:	82 e7       	ldi	r24, 0x72	; 114
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 2a 02 	call	0x454	; 0x454 <puts>
 putchar('26'); //sends the ASCII value of <Ctrl>+<Z> 
 12e:	86 e3       	ldi	r24, 0x36	; 54
 130:	92 e3       	ldi	r25, 0x32	; 50
 132:	0e 94 23 02 	call	0x446	; 0x446 <putchar>
 
} 
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <main>:



int main()
{
 140:	1f 93       	push	r17

DDRC=0x00;
 142:	14 ba       	out	0x14, r1	; 20
PORTC=0xff;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	85 bb       	out	0x15, r24	; 21
 
void usart_init()
{


UCSRB =  (1 << RXEN) | (1 << TXEN);                    
 148:	88 e1       	ldi	r24, 0x18	; 24
 14a:	8a b9       	out	0x0a, r24	; 10

// Use 8-bit character sizes
//UCSRC |= (1 << URSEL) | (1 << UCZS0) | (1 << UCZS1);   
UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);   
 14c:	80 b5       	in	r24, 0x20	; 32
 14e:	86 68       	ori	r24, 0x86	; 134
 150:	80 bd       	out	0x20, r24	; 32

// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
UBRRL = BAUD_PRESCALE;  
 152:	8d e4       	ldi	r24, 0x4D	; 77
 154:	89 b9       	out	0x09, r24	; 9
                              
UBRRH = (BAUD_PRESCALE >> 8);                          
 156:	10 bc       	out	0x20, r1	; 32
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	28 eb       	ldi	r18, 0xB8	; 184
 15e:	3b e0       	ldi	r19, 0x0B	; 11
 160:	f9 01       	movw	r30, r18
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x22>

void WaitMs(unsigned int ms)		
{
	unsigned int i;

	for(i=0;i<=ms;i++)
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	43 e0       	ldi	r20, 0x03	; 3
 16a:	89 3e       	cpi	r24, 0xE9	; 233
 16c:	94 07       	cpc	r25, r20
 16e:	c1 f7       	brne	.-16     	; 0x160 <main+0x20>
 170:	e0 ea       	ldi	r30, 0xA0	; 160
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	04 c0       	rjmp	.+8      	; 0x17e <main+0x3e>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 176:	5d 9b       	sbis	0x0b, 5	; 11
 178:	fe cf       	rjmp	.-4      	; 0x176 <main+0x36>
 UDR = data;
 17a:	ec b9       	out	0x0c, r30	; 12
 17c:	31 96       	adiw	r30, 0x01	; 1
}

void usart_message(unsigned char *var) 
{
int h;
while(*var)         
 17e:	80 81       	ld	r24, Z
 180:	88 23       	and	r24, r24
 182:	c9 f7       	brne	.-14     	; 0x176 <main+0x36>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	28 eb       	ldi	r18, 0xB8	; 184
 18a:	3b e0       	ldi	r19, 0x0B	; 11
 18c:	f9 01       	movw	r30, r18
 18e:	31 97       	sbiw	r30, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <main+0x4e>

void WaitMs(unsigned int ms)		
{
	unsigned int i;

	for(i=0;i<=ms;i++)
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	83 33       	cpi	r24, 0x33	; 51
 196:	91 05       	cpc	r25, r1
 198:	c9 f7       	brne	.-14     	; 0x18c <main+0x4c>
 19a:	e6 e9       	ldi	r30, 0x96	; 150
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <main+0x68>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 1a0:	5d 9b       	sbis	0x0b, 5	; 11
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <main+0x60>
 UDR = data;
 1a4:	ec b9       	out	0x0c, r30	; 12
 1a6:	31 96       	adiw	r30, 0x01	; 1
}

void usart_message(unsigned char *var) 
{
int h;
while(*var)         
 1a8:	80 81       	ld	r24, Z
 1aa:	88 23       	and	r24, r24
 1ac:	c9 f7       	brne	.-14     	; 0x1a0 <main+0x60>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 1ae:	5d 9b       	sbis	0x0b, 5	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <main+0x6e>
 UDR = data;
 1b2:	8d e0       	ldi	r24, 0x0D	; 13
 1b4:	8c b9       	out	0x0c, r24	; 12
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	28 eb       	ldi	r18, 0xB8	; 184
 1bc:	3b e0       	ldi	r19, 0x0B	; 11
 1be:	f9 01       	movw	r30, r18
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0x80>

void WaitMs(unsigned int ms)		
{
	unsigned int i;

	for(i=0;i<=ms;i++)
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	85 31       	cpi	r24, 0x15	; 21
 1c8:	91 05       	cpc	r25, r1
 1ca:	c9 f7       	brne	.-14     	; 0x1be <main+0x7e>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	28 eb       	ldi	r18, 0xB8	; 184
 1d2:	3b e0       	ldi	r19, 0x0B	; 11
 1d4:	f9 01       	movw	r30, r18
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x96>
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	85 31       	cpi	r24, 0x15	; 21
 1de:	91 05       	cpc	r25, r1
 1e0:	c9 f7       	brne	.-14     	; 0x1d4 <main+0x94>
 1e2:	e2 ec       	ldi	r30, 0xC2	; 194
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <main+0xb0>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 1e8:	5d 9b       	sbis	0x0b, 5	; 11
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <main+0xa8>
 UDR = data;
 1ec:	ec b9       	out	0x0c, r30	; 12
 1ee:	31 96       	adiw	r30, 0x01	; 1
}

void usart_message(unsigned char *var) 
{
int h;
while(*var)         
 1f0:	80 81       	ld	r24, Z
 1f2:	88 23       	and	r24, r24
 1f4:	c9 f7       	brne	.-14     	; 0x1e8 <main+0xa8>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 1f6:	5d 9b       	sbis	0x0b, 5	; 11
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <main+0xb6>
 UDR = data;
 1fa:	8d e0       	ldi	r24, 0x0D	; 13
 1fc:	8c b9       	out	0x0c, r24	; 12
 1fe:	e4 ea       	ldi	r30, 0xA4	; 164
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	04 c0       	rjmp	.+8      	; 0x20c <main+0xcc>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 204:	5d 9b       	sbis	0x0b, 5	; 11
 206:	fe cf       	rjmp	.-4      	; 0x204 <main+0xc4>
 UDR = data;
 208:	ec b9       	out	0x0c, r30	; 12
 20a:	31 96       	adiw	r30, 0x01	; 1
}

void usart_message(unsigned char *var) 
{
int h;
while(*var)         
 20c:	80 81       	ld	r24, Z
 20e:	88 23       	and	r24, r24
 210:	c9 f7       	brne	.-14     	; 0x204 <main+0xc4>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 212:	5d 9b       	sbis	0x0b, 5	; 11
 214:	fe cf       	rjmp	.-4      	; 0x212 <main+0xd2>
 UDR = data;
 216:	8a e1       	ldi	r24, 0x1A	; 26
 218:	8c b9       	out	0x0c, r24	; 12
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	28 eb       	ldi	r18, 0xB8	; 184
 220:	3b e0       	ldi	r19, 0x0B	; 11
 222:	f9 01       	movw	r30, r18
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <main+0xe4>

void WaitMs(unsigned int ms)		
{
	unsigned int i;

	for(i=0;i<=ms;i++)
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	43 e0       	ldi	r20, 0x03	; 3
 22c:	89 3e       	cpi	r24, 0xE9	; 233
 22e:	94 07       	cpc	r25, r20
 230:	c1 f7       	brne	.-16     	; 0x222 <main+0xe2>
	usart_writech(0x0D);
	usart_message("Working gsm module ok shankar");
	usart_writech(0x1A);
	WaitMs(1000);

	sendmessage("OK","9958357446");
 232:	67 ed       	ldi	r22, 0xD7	; 215
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	82 ee       	ldi	r24, 0xE2	; 226
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 72 00 	call	0xe4	; 0xe4 <sendmessage>
				final_message[i] = lati_value[i];

			}		

			final_message[9] = lati_dir;
			final_message[10] = ' ';
 23e:	10 e2       	ldi	r17, 0x20	; 32
 240:	48 eb       	ldi	r20, 0xB8	; 184
 242:	5b e0       	ldi	r21, 0x0B	; 11

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 UDR = data;
 244:	6d e0       	ldi	r22, 0x0D	; 13
	usart_writech(0x0D);
	usart_message("Working gsm module ok shankar");
	usart_writech(0x1A);
	WaitMs(1000);

	sendmessage("OK","9958357446");
 246:	7a e1       	ldi	r23, 0x1A	; 26
 248:	30 91 e7 00 	lds	r19, 0x00E7
 24c:	20 91 e6 00 	lds	r18, 0x00E6
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 250:	5f 9b       	sbis	0x0b, 7	; 11
 252:	fe cf       	rjmp	.-4      	; 0x250 <main+0x110>

return(UDR);                                            
 254:	9c b1       	in	r25, 0x0c	; 12
	sendmessage("OK","9958357446");
    while(1)
	{
		a:
		value=usart_getch();
		if(value=='$')
 256:	94 32       	cpi	r25, 0x24	; 36
 258:	09 f0       	breq	.+2      	; 0x25c <main+0x11c>
 25a:	5b c0       	rjmp	.+182    	; 0x312 <main+0x1d2>
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 25c:	5f 9b       	sbis	0x0b, 7	; 11
 25e:	fe cf       	rjmp	.-4      	; 0x25c <main+0x11c>

return(UDR);                                            
 260:	9c b1       	in	r25, 0x0c	; 12
		a:
		value=usart_getch();
		if(value=='$')
		{		
			value=usart_getch();
			if(value=='G')
 262:	97 34       	cpi	r25, 0x47	; 71
 264:	09 f0       	breq	.+2      	; 0x268 <main+0x128>
 266:	55 c0       	rjmp	.+170    	; 0x312 <main+0x1d2>
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 268:	5f 9b       	sbis	0x0b, 7	; 11
 26a:	fe cf       	rjmp	.-4      	; 0x268 <main+0x128>

return(UDR);                                            
 26c:	9c b1       	in	r25, 0x0c	; 12
		{		
			value=usart_getch();
			if(value=='G')
			{
				value=usart_getch();
				if(value=='P')
 26e:	90 35       	cpi	r25, 0x50	; 80
 270:	09 f0       	breq	.+2      	; 0x274 <main+0x134>
 272:	4f c0       	rjmp	.+158    	; 0x312 <main+0x1d2>
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 274:	5f 9b       	sbis	0x0b, 7	; 11
 276:	fe cf       	rjmp	.-4      	; 0x274 <main+0x134>

return(UDR);                                            
 278:	9c b1       	in	r25, 0x0c	; 12
			{
				value=usart_getch();
				if(value=='P')
				{
					value=usart_getch();
					if(value=='G')
 27a:	97 34       	cpi	r25, 0x47	; 71
 27c:	09 f0       	breq	.+2      	; 0x280 <main+0x140>
 27e:	49 c0       	rjmp	.+146    	; 0x312 <main+0x1d2>
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 280:	5f 9b       	sbis	0x0b, 7	; 11
 282:	fe cf       	rjmp	.-4      	; 0x280 <main+0x140>

return(UDR);                                            
 284:	9c b1       	in	r25, 0x0c	; 12
				{
					value=usart_getch();
					if(value=='G')
					{				
						value=usart_getch();
						if(value=='A')
 286:	91 34       	cpi	r25, 0x41	; 65
 288:	09 f0       	breq	.+2      	; 0x28c <main+0x14c>
 28a:	43 c0       	rjmp	.+134    	; 0x312 <main+0x1d2>
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 28c:	5f 9b       	sbis	0x0b, 7	; 11
 28e:	fe cf       	rjmp	.-4      	; 0x28c <main+0x14c>

return(UDR);                                            
 290:	9c b1       	in	r25, 0x0c	; 12
					{				
						value=usart_getch();
						if(value=='A')
						{
							value=usart_getch();
							if(value==',')
 292:	9c 32       	cpi	r25, 0x2C	; 44
 294:	f1 f5       	brne	.+124    	; 0x312 <main+0x1d2>
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 296:	5f 9b       	sbis	0x0b, 7	; 11
 298:	fe cf       	rjmp	.-4      	; 0x296 <main+0x156>
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <main+0x160>

return(UDR);                                            
 29c:	5f 9b       	sbis	0x0b, 7	; 11
 29e:	fe cf       	rjmp	.-4      	; 0x29c <main+0x15c>
 2a0:	8c b1       	in	r24, 0x0c	; 12
						{
							value=usart_getch();
							if(value==',')
							{
								value=usart_getch();
								while(value!=',')
 2a2:	8c 32       	cpi	r24, 0x2C	; 44
 2a4:	d9 f7       	brne	.-10     	; 0x29c <main+0x15c>
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	09 c0       	rjmp	.+18     	; 0x2bc <main+0x17c>
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 2aa:	5f 9b       	sbis	0x0b, 7	; 11
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <main+0x16a>

return(UDR);                                            
 2ae:	8c b1       	in	r24, 0x0c	; 12
									value=usart_getch();
								}
	
								for(i=0; i<9; i++)
								{
									lati_value[i] = usart_getch();
 2b0:	e9 2f       	mov	r30, r25
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	ed 50       	subi	r30, 0x0D	; 13
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	80 83       	st	Z, r24
 2ba:	9f 5f       	subi	r25, 0xFF	; 255
								while(value!=',')
								{
									value=usart_getch();
								}
	
								for(i=0; i<9; i++)
 2bc:	99 30       	cpi	r25, 0x09	; 9
 2be:	a9 f7       	brne	.-22     	; 0x2aa <main+0x16a>
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 2c0:	5f 9b       	sbis	0x0b, 7	; 11
 2c2:	fe cf       	rjmp	.-4      	; 0x2c0 <main+0x180>

return(UDR);                                            
 2c4:	8c b1       	in	r24, 0x0c	; 12
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 2c6:	5f 9b       	sbis	0x0b, 7	; 11
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <main+0x186>

return(UDR);                                            
 2ca:	3c b1       	in	r19, 0x0c	; 12
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 2cc:	5f 9b       	sbis	0x0b, 7	; 11
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <main+0x18c>

return(UDR);                                            
 2d0:	8c b1       	in	r24, 0x0c	; 12
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	09 c0       	rjmp	.+18     	; 0x2e8 <main+0x1a8>
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 2d6:	5f 9b       	sbis	0x0b, 7	; 11
 2d8:	fe cf       	rjmp	.-4      	; 0x2d6 <main+0x196>

return(UDR);                                            
 2da:	8c b1       	in	r24, 0x0c	; 12
								lati_dir=usart_getch();
								value=usart_getch();
								for(i=0; i<10; i++)
								{			

									longi_value[i] = usart_getch();
 2dc:	e9 2f       	mov	r30, r25
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	e7 51       	subi	r30, 0x17	; 23
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	80 83       	st	Z, r24
 2e6:	9f 5f       	subi	r25, 0xFF	; 255
								}
								value = usart_getch();
	
								lati_dir=usart_getch();
								value=usart_getch();
								for(i=0; i<10; i++)
 2e8:	9a 30       	cpi	r25, 0x0A	; 10
 2ea:	a9 f7       	brne	.-22     	; 0x2d6 <main+0x196>
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 2ec:	5f 9b       	sbis	0x0b, 7	; 11
 2ee:	fe cf       	rjmp	.-4      	; 0x2ec <main+0x1ac>

return(UDR);                                            
 2f0:	9c b1       	in	r25, 0x0c	; 12
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	09 c0       	rjmp	.+18     	; 0x308 <main+0x1c8>
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 2f6:	5f 9b       	sbis	0x0b, 7	; 11
 2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <main+0x1b6>

return(UDR);                                            
 2fa:	9c b1       	in	r25, 0x0c	; 12
								}
								value = usart_getch();
	
								for(i=1;value!=',';i++)
								{
									longi_value[i]=usart_getch();
 2fc:	e8 2f       	mov	r30, r24
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	e7 51       	subi	r30, 0x17	; 23
 302:	ff 4f       	sbci	r31, 0xFF	; 255
 304:	90 83       	st	Z, r25
 306:	8f 5f       	subi	r24, 0xFF	; 255

									longi_value[i] = usart_getch();
								}
								value = usart_getch();
	
								for(i=1;value!=',';i++)
 308:	9c 32       	cpi	r25, 0x2C	; 44
 30a:	a9 f7       	brne	.-22     	; 0x2f6 <main+0x1b6>
 
 
unsigned int usart_getch()
{

while (!(UCSRA & (1 << RXC)));                          
 30c:	5f 9b       	sbis	0x0b, 7	; 11
 30e:	fe cf       	rjmp	.-4      	; 0x30c <main+0x1cc>

return(UDR);                                            
 310:	2c b1       	in	r18, 0x0c	; 12
						}
					}
				}
			}
		}
		if(*lati_value && *longi_value)
 312:	80 91 f3 00 	lds	r24, 0x00F3
 316:	88 23       	and	r24, r24
 318:	09 f4       	brne	.+2      	; 0x31c <main+0x1dc>
 31a:	9a cf       	rjmp	.-204    	; 0x250 <main+0x110>
 31c:	80 91 e9 00 	lds	r24, 0x00E9
 320:	88 23       	and	r24, r24
 322:	09 f4       	brne	.+2      	; 0x326 <main+0x1e6>
 324:	95 cf       	rjmp	.-214    	; 0x250 <main+0x110>
 326:	30 93 e7 00 	sts	0x00E7, r19
 32a:	20 93 e6 00 	sts	0x00E6, r18
 32e:	90 93 1a 01 	sts	0x011A, r25
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0a c0       	rjmp	.+20     	; 0x34a <main+0x20a>
		{
			for(i=0; i<9; i++)
			{
				final_message[i] = lati_value[i];
 336:	e9 2f       	mov	r30, r25
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	df 01       	movw	r26, r30
 33c:	ad 50       	subi	r26, 0x0D	; 13
 33e:	bf 4f       	sbci	r27, 0xFF	; 255
 340:	8c 91       	ld	r24, X
 342:	e4 50       	subi	r30, 0x04	; 4
 344:	ff 4f       	sbci	r31, 0xFF	; 255
 346:	80 83       	st	Z, r24
 348:	9f 5f       	subi	r25, 0xFF	; 255
				}
			}
		}
		if(*lati_value && *longi_value)
		{
			for(i=0; i<9; i++)
 34a:	99 30       	cpi	r25, 0x09	; 9
 34c:	a0 f3       	brcs	.-24     	; 0x336 <main+0x1f6>
			{
				final_message[i] = lati_value[i];

			}		

			final_message[9] = lati_dir;
 34e:	30 93 05 01 	sts	0x0105, r19
			final_message[10] = ' ';
 352:	10 93 06 01 	sts	0x0106, r17
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0a c0       	rjmp	.+20     	; 0x36e <main+0x22e>
			for(i=0; i<10; i++)
			{

				final_message[i+11] = longi_value[i];
 35a:	e9 2f       	mov	r30, r25
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	df 01       	movw	r26, r30
 360:	a7 51       	subi	r26, 0x17	; 23
 362:	bf 4f       	sbci	r27, 0xFF	; 255
 364:	8c 91       	ld	r24, X
 366:	e4 50       	subi	r30, 0x04	; 4
 368:	ff 4f       	sbci	r31, 0xFF	; 255
 36a:	83 87       	std	Z+11, r24	; 0x0b
 36c:	9f 5f       	subi	r25, 0xFF	; 255

			}		

			final_message[9] = lati_dir;
			final_message[10] = ' ';
			for(i=0; i<10; i++)
 36e:	9a 30       	cpi	r25, 0x0A	; 10
 370:	a0 f3       	brcs	.-24     	; 0x35a <main+0x21a>
 372:	90 93 e8 00 	sts	0x00E8, r25

				final_message[i+11] = longi_value[i];
			}

	
			final_message[21] = longi_dir;
 376:	20 93 11 01 	sts	0x0111, r18
			final_message[22] = '\0';
 37a:	10 92 12 01 	sts	0x0112, r1
		}
		else
		goto a;
		while(PINC==0xff);
 37e:	83 b3       	in	r24, 0x13	; 19
 380:	8f 3f       	cpi	r24, 0xFF	; 255
 382:	e9 f3       	breq	.-6      	; 0x37e <main+0x23e>
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	fa 01       	movw	r30, r20
 38a:	31 97       	sbiw	r30, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <main+0x24a>

void WaitMs(unsigned int ms)		
{
	unsigned int i;

	for(i=0;i<=ms;i++)
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	23 e0       	ldi	r18, 0x03	; 3
 392:	89 3e       	cpi	r24, 0xE9	; 233
 394:	92 07       	cpc	r25, r18
 396:	c1 f7       	brne	.-16     	; 0x388 <main+0x248>
 398:	e0 ea       	ldi	r30, 0xA0	; 160
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <main+0x266>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 39e:	5d 9b       	sbis	0x0b, 5	; 11
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <main+0x25e>
 UDR = data;
 3a2:	ec b9       	out	0x0c, r30	; 12
 3a4:	31 96       	adiw	r30, 0x01	; 1
}

void usart_message(unsigned char *var) 
{
int h;
while(*var)         
 3a6:	80 81       	ld	r24, Z
 3a8:	88 23       	and	r24, r24
 3aa:	c9 f7       	brne	.-14     	; 0x39e <main+0x25e>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	fa 01       	movw	r30, r20
 3b2:	31 97       	sbiw	r30, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <main+0x272>

void WaitMs(unsigned int ms)		
{
	unsigned int i;

	for(i=0;i<=ms;i++)
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	83 33       	cpi	r24, 0x33	; 51
 3ba:	91 05       	cpc	r25, r1
 3bc:	c9 f7       	brne	.-14     	; 0x3b0 <main+0x270>
 3be:	e6 e9       	ldi	r30, 0x96	; 150
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	04 c0       	rjmp	.+8      	; 0x3cc <main+0x28c>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 3c4:	5d 9b       	sbis	0x0b, 5	; 11
 3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <main+0x284>
 UDR = data;
 3c8:	ec b9       	out	0x0c, r30	; 12
 3ca:	31 96       	adiw	r30, 0x01	; 1
}

void usart_message(unsigned char *var) 
{
int h;
while(*var)         
 3cc:	80 81       	ld	r24, Z
 3ce:	88 23       	and	r24, r24
 3d0:	c9 f7       	brne	.-14     	; 0x3c4 <main+0x284>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 3d2:	5d 9b       	sbis	0x0b, 5	; 11
 3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <main+0x292>
 UDR = data;
 3d6:	6c b9       	out	0x0c, r22	; 12
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	fa 01       	movw	r30, r20
 3de:	31 97       	sbiw	r30, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <main+0x29e>

void WaitMs(unsigned int ms)		
{
	unsigned int i;

	for(i=0;i<=ms;i++)
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	85 31       	cpi	r24, 0x15	; 21
 3e6:	91 05       	cpc	r25, r1
 3e8:	c9 f7       	brne	.-14     	; 0x3dc <main+0x29c>
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	fa 01       	movw	r30, r20
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <main+0x2b0>
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	85 31       	cpi	r24, 0x15	; 21
 3f8:	91 05       	cpc	r25, r1
 3fa:	c9 f7       	brne	.-14     	; 0x3ee <main+0x2ae>
 3fc:	ee e7       	ldi	r30, 0x7E	; 126
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	04 c0       	rjmp	.+8      	; 0x40a <main+0x2ca>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 402:	5d 9b       	sbis	0x0b, 5	; 11
 404:	fe cf       	rjmp	.-4      	; 0x402 <main+0x2c2>
 UDR = data;
 406:	ec b9       	out	0x0c, r30	; 12
 408:	31 96       	adiw	r30, 0x01	; 1
}

void usart_message(unsigned char *var) 
{
int h;
while(*var)         
 40a:	80 81       	ld	r24, Z
 40c:	88 23       	and	r24, r24
 40e:	c9 f7       	brne	.-14     	; 0x402 <main+0x2c2>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 410:	5d 9b       	sbis	0x0b, 5	; 11
 412:	fe cf       	rjmp	.-4      	; 0x410 <main+0x2d0>
 UDR = data;
 414:	6c b9       	out	0x0c, r22	; 12
 416:	ec ef       	ldi	r30, 0xFC	; 252
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	04 c0       	rjmp	.+8      	; 0x424 <main+0x2e4>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 41c:	5d 9b       	sbis	0x0b, 5	; 11
 41e:	fe cf       	rjmp	.-4      	; 0x41c <main+0x2dc>
 UDR = data;
 420:	ec b9       	out	0x0c, r30	; 12
 422:	31 96       	adiw	r30, 0x01	; 1
}

void usart_message(unsigned char *var) 
{
int h;
while(*var)         
 424:	80 81       	ld	r24, Z
 426:	88 23       	and	r24, r24
 428:	c9 f7       	brne	.-14     	; 0x41c <main+0x2dc>
}

void usart_writech(unsigned char data)
{
 
 while(!(UCSRA & (1<<UDRE)));
 42a:	5d 9b       	sbis	0x0b, 5	; 11
 42c:	fe cf       	rjmp	.-4      	; 0x42a <main+0x2ea>
 UDR = data;
 42e:	7c b9       	out	0x0c, r23	; 12
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	fa 01       	movw	r30, r20
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <main+0x2f6>

void WaitMs(unsigned int ms)		
{
	unsigned int i;

	for(i=0;i<=ms;i++)
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	23 e0       	ldi	r18, 0x03	; 3
 43e:	89 3e       	cpi	r24, 0xE9	; 233
 440:	92 07       	cpc	r25, r18
 442:	c1 f7       	brne	.-16     	; 0x434 <main+0x2f4>
 444:	01 cf       	rjmp	.-510    	; 0x248 <main+0x108>

00000446 <putchar>:
 446:	60 91 1d 01 	lds	r22, 0x011D
 44a:	70 91 1e 01 	lds	r23, 0x011E
 44e:	0e 94 5f 02 	call	0x4be	; 0x4be <fputc>
 452:	08 95       	ret

00000454 <puts>:
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	8c 01       	movw	r16, r24
 45e:	e0 91 1d 01 	lds	r30, 0x011D
 462:	f0 91 1e 01 	lds	r31, 0x011E
 466:	83 81       	ldd	r24, Z+3	; 0x03
 468:	81 ff       	sbrs	r24, 1
 46a:	21 c0       	rjmp	.+66     	; 0x4ae <__stack+0x4f>
 46c:	c0 e0       	ldi	r28, 0x00	; 0
 46e:	d0 e0       	ldi	r29, 0x00	; 0
 470:	0d c0       	rjmp	.+26     	; 0x48c <__stack+0x2d>
 472:	e0 91 1d 01 	lds	r30, 0x011D
 476:	f0 91 1e 01 	lds	r31, 0x011E
 47a:	20 85       	ldd	r18, Z+8	; 0x08
 47c:	31 85       	ldd	r19, Z+9	; 0x09
 47e:	bf 01       	movw	r22, r30
 480:	f9 01       	movw	r30, r18
 482:	09 95       	icall
 484:	89 2b       	or	r24, r25
 486:	11 f0       	breq	.+4      	; 0x48c <__stack+0x2d>
 488:	cf ef       	ldi	r28, 0xFF	; 255
 48a:	df ef       	ldi	r29, 0xFF	; 255
 48c:	f8 01       	movw	r30, r16
 48e:	81 91       	ld	r24, Z+
 490:	8f 01       	movw	r16, r30
 492:	88 23       	and	r24, r24
 494:	71 f7       	brne	.-36     	; 0x472 <__stack+0x13>
 496:	e0 91 1d 01 	lds	r30, 0x011D
 49a:	f0 91 1e 01 	lds	r31, 0x011E
 49e:	20 85       	ldd	r18, Z+8	; 0x08
 4a0:	31 85       	ldd	r19, Z+9	; 0x09
 4a2:	bf 01       	movw	r22, r30
 4a4:	8a e0       	ldi	r24, 0x0A	; 10
 4a6:	f9 01       	movw	r30, r18
 4a8:	09 95       	icall
 4aa:	89 2b       	or	r24, r25
 4ac:	11 f0       	breq	.+4      	; 0x4b2 <__stack+0x53>
 4ae:	cf ef       	ldi	r28, 0xFF	; 255
 4b0:	df ef       	ldi	r29, 0xFF	; 255
 4b2:	ce 01       	movw	r24, r28
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	08 95       	ret

000004be <fputc>:
 4be:	0f 93       	push	r16
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	8c 01       	movw	r16, r24
 4c8:	eb 01       	movw	r28, r22
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	81 ff       	sbrs	r24, 1
 4ce:	1b c0       	rjmp	.+54     	; 0x506 <fputc+0x48>
 4d0:	82 ff       	sbrs	r24, 2
 4d2:	0d c0       	rjmp	.+26     	; 0x4ee <fputc+0x30>
 4d4:	2e 81       	ldd	r18, Y+6	; 0x06
 4d6:	3f 81       	ldd	r19, Y+7	; 0x07
 4d8:	8c 81       	ldd	r24, Y+4	; 0x04
 4da:	9d 81       	ldd	r25, Y+5	; 0x05
 4dc:	28 17       	cp	r18, r24
 4de:	39 07       	cpc	r19, r25
 4e0:	64 f4       	brge	.+24     	; 0x4fa <fputc+0x3c>
 4e2:	e8 81       	ld	r30, Y
 4e4:	f9 81       	ldd	r31, Y+1	; 0x01
 4e6:	01 93       	st	Z+, r16
 4e8:	f9 83       	std	Y+1, r31	; 0x01
 4ea:	e8 83       	st	Y, r30
 4ec:	06 c0       	rjmp	.+12     	; 0x4fa <fputc+0x3c>
 4ee:	e8 85       	ldd	r30, Y+8	; 0x08
 4f0:	f9 85       	ldd	r31, Y+9	; 0x09
 4f2:	80 2f       	mov	r24, r16
 4f4:	09 95       	icall
 4f6:	89 2b       	or	r24, r25
 4f8:	31 f4       	brne	.+12     	; 0x506 <fputc+0x48>
 4fa:	8e 81       	ldd	r24, Y+6	; 0x06
 4fc:	9f 81       	ldd	r25, Y+7	; 0x07
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	9f 83       	std	Y+7, r25	; 0x07
 502:	8e 83       	std	Y+6, r24	; 0x06
 504:	02 c0       	rjmp	.+4      	; 0x50a <fputc+0x4c>
 506:	0f ef       	ldi	r16, 0xFF	; 255
 508:	1f ef       	ldi	r17, 0xFF	; 255
 50a:	c8 01       	movw	r24, r16
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	1f 91       	pop	r17
 512:	0f 91       	pop	r16
 514:	08 95       	ret

00000516 <_exit>:
 516:	f8 94       	cli

00000518 <__stop_program>:
 518:	ff cf       	rjmp	.-2      	; 0x518 <__stop_program>
