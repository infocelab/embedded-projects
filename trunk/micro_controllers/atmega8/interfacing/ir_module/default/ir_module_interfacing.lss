
ir_module_interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003d  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001da  00000000  00000000  000001c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000119  00000000  00000000  000003a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c1  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000010f  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000080  00000000  00000000  000007df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000085f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e1       	ldi	r30, 0x18	; 24
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a0 30       	cpi	r26, 0x00	; 0
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:
   }
 }
 
void ioinit (void)
{
   DDRC = 0b11101111; //Pin 27 of MCU as input
  d0:	8f ee       	ldi	r24, 0xEF	; 239
  d2:	84 bb       	out	0x14, r24	; 20
   PORTC = 0b00010000; //Enable internal pudown of pin 27
  d4:	80 e1       	ldi	r24, 0x10	; 16
  d6:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d8:	29 e1       	ldi	r18, 0x19	; 25
  da:	30 e0       	ldi	r19, 0x00	; 0
int main (void)
{
   ioinit(); //Setup IO pins and defaults
   while (1)
   {
      if(bit_is_set(PINC,4))    // Check IR module is sensed or not
  dc:	9c 9b       	sbis	0x13, 4	; 19
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0xc>
  e0:	80 e1       	ldi	r24, 0x10	; 16
  e2:	97 e2       	ldi	r25, 0x27	; 39
  e4:	f9 01       	movw	r30, r18
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ec:	d9 f7       	brne	.-10     	; 0xe4 <main+0x14>
   PORTC |= _BV(PC5); //Pin 28 of MCU as output
}
 
void led_on(void)
{
   PORTC &= ~_BV(PC5);
  ee:	ad 98       	cbi	0x15, 5	; 21
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	9f ef       	ldi	r25, 0xFF	; 255
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fc:	d9 f7       	brne	.-10     	; 0xf4 <main+0x24>
   PORTC = 0b00010000; //Enable internal pudown of pin 27
}
 
void led_off(void)
{
   PORTC |= _BV(PC5); //Pin 28 of MCU as output
  fe:	ad 9a       	sbi	0x15, 5	; 21
 100:	ed cf       	rjmp	.-38     	; 0xdc <main+0xc>

00000102 <ioinit>:
   }
 }
 
void ioinit (void)
{
   DDRC = 0b11101111; //Pin 27 of MCU as input
 102:	8f ee       	ldi	r24, 0xEF	; 239
 104:	84 bb       	out	0x14, r24	; 20
   PORTC = 0b00010000; //Enable internal pudown of pin 27
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	85 bb       	out	0x15, r24	; 21
}
 10a:	08 95       	ret

0000010c <led_off>:
 
void led_off(void)
{
   PORTC |= _BV(PC5); //Pin 28 of MCU as output
 10c:	ad 9a       	sbi	0x15, 5	; 21
}
 10e:	08 95       	ret

00000110 <led_on>:
 
void led_on(void)
{
   PORTC &= ~_BV(PC5);
 110:	ad 98       	cbi	0x15, 5	; 21
}
 112:	08 95       	ret

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
