
motor_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000050  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000477  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000150  00000000  00000000  000006db  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000300  00000000  00000000  0000082b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000118  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000140  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ea       	ldi	r30, 0xA0	; 160
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a0 30       	cpi	r26, 0x00	; 0
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  c8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <main>:
   
 }
 
void ioinit (void)
{
    DDRC = 0b00011000; //set the data direction register to o/p
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	84 bb       	out	0x14, r24	; 20
    PORTC = 0b00000000; //Enable internal pudown  
  d4:	15 ba       	out	0x15, r1	; 21
    PORTC = 0b00000000;
   _delay_ms(500000);
}
void rotate_left(void)
{
     PORTC = 0b00010000;
  d6:	50 e1       	ldi	r21, 0x10	; 16
	 PORTC = 0b00001000;
  d8:	48 e0       	ldi	r20, 0x08	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  da:	29 e1       	ldi	r18, 0x19	; 25
  dc:	30 e0       	ldi	r19, 0x00	; 0
    PORTC = 0b00000000;
   _delay_ms(500000);
}
void rotate_left(void)
{
     PORTC = 0b00010000;
  de:	55 bb       	out	0x15, r21	; 21
	 PORTC = 0b00001000;
  e0:	45 bb       	out	0x15, r20	; 21
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	9f ef       	ldi	r25, 0xFF	; 255
  e6:	f9 01       	movw	r30, r18
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <main+0x16>
    PORTC = 0b00000000; //Enable internal pudown  
}
 
 void stop(void)
{
    PORTC = 0b00000000;
  f0:	15 ba       	out	0x15, r1	; 21
    PORTC = 0b00000000;
  f2:	15 ba       	out	0x15, r1	; 21
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	9f ef       	ldi	r25, 0xFF	; 255
  f8:	f9 01       	movw	r30, r18
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 100:	d9 f7       	brne	.-10     	; 0xf8 <main+0x28>
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	9f ef       	ldi	r25, 0xFF	; 255
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10e:	d9 f7       	brne	.-10     	; 0x106 <main+0x36>
	_delay_ms(550000);
}
 
void rotate_right(void)
{
    PORTC = 0b00001000;
 110:	45 bb       	out	0x15, r20	; 21
    PORTC = 0b00010000;
 112:	55 bb       	out	0x15, r21	; 21
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	f9 01       	movw	r30, r18
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 120:	d9 f7       	brne	.-10     	; 0x118 <main+0x48>
    PORTC = 0b00000000; //Enable internal pudown  
}
 
 void stop(void)
{
    PORTC = 0b00000000;
 122:	15 ba       	out	0x15, r1	; 21
    PORTC = 0b00000000;
 124:	15 ba       	out	0x15, r1	; 21
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	9f ef       	ldi	r25, 0xFF	; 255
 12a:	f9 01       	movw	r30, r18
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 130:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 132:	d9 f7       	brne	.-10     	; 0x12a <main+0x5a>
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	9f ef       	ldi	r25, 0xFF	; 255
 138:	f9 01       	movw	r30, r18
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <main+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 140:	d9 f7       	brne	.-10     	; 0x138 <main+0x68>
 142:	cd cf       	rjmp	.-102    	; 0xde <main+0xe>

00000144 <ioinit>:
   
 }
 
void ioinit (void)
{
    DDRC = 0b00011000; //set the data direction register to o/p
 144:	88 e1       	ldi	r24, 0x18	; 24
 146:	84 bb       	out	0x14, r24	; 20
    PORTC = 0b00000000; //Enable internal pudown  
 148:	15 ba       	out	0x15, r1	; 21
}
 14a:	08 95       	ret

0000014c <stop>:
 
 void stop(void)
{
    PORTC = 0b00000000;
 14c:	15 ba       	out	0x15, r1	; 21
    PORTC = 0b00000000;
 14e:	15 ba       	out	0x15, r1	; 21
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	9f ef       	ldi	r25, 0xFF	; 255
 154:	29 e1       	ldi	r18, 0x19	; 25
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <stop+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 160:	d9 f7       	brne	.-10     	; 0x158 <stop+0xc>
   _delay_ms(500000);
}
 162:	08 95       	ret

00000164 <rotate_left>:
void rotate_left(void)
{
     PORTC = 0b00010000;
 164:	80 e1       	ldi	r24, 0x10	; 16
 166:	85 bb       	out	0x15, r24	; 21
	 PORTC = 0b00001000;
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	85 bb       	out	0x15, r24	; 21
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	9f ef       	ldi	r25, 0xFF	; 255
 170:	29 e1       	ldi	r18, 0x19	; 25
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	f9 01       	movw	r30, r18
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <rotate_left+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17c:	d9 f7       	brne	.-10     	; 0x174 <rotate_left+0x10>
	_delay_ms(550000);
}
 17e:	08 95       	ret

00000180 <rotate_right>:
 
void rotate_right(void)
{
    PORTC = 0b00001000;
 180:	88 e0       	ldi	r24, 0x08	; 8
 182:	85 bb       	out	0x15, r24	; 21
    PORTC = 0b00010000;
 184:	80 e1       	ldi	r24, 0x10	; 16
 186:	85 bb       	out	0x15, r24	; 21
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	9f ef       	ldi	r25, 0xFF	; 255
 18c:	29 e1       	ldi	r18, 0x19	; 25
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <rotate_right+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 196:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 198:	d9 f7       	brne	.-10     	; 0x190 <rotate_right+0x10>
   _delay_ms(550000);
}
 19a:	08 95       	ret

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
