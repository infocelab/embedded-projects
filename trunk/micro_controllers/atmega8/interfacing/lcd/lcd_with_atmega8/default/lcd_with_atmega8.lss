
lcd_with_atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000388  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  00000388  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000092  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000079b  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000290  00000000  00000000  00000ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005d9  00000000  00000000  00000f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a1  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000386  00000000  00000000  00001785  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001b0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e8       	ldi	r30, 0x88	; 136
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 3e       	cpi	r26, 0xE2	; 226
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 ee       	ldi	r26, 0xE2	; 226
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 3e       	cpi	r26, 0xE2	; 226
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	94 c1       	rjmp	.+808    	; 0x384 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
#include <util/delay.h>

#include "lcd.h"

void main()
{
  5e:	0f 93       	push	r16
  60:	1f 93       	push	r17
  62:	cf 93       	push	r28
  64:	df 93       	push	r29
   unsigned char i;

   //Initialize LCD module
   LCDInit(LS_BLINK|LS_ULINE);
  66:	83 e0       	ldi	r24, 0x03	; 3
  68:	2b d1       	rcall	.+598    	; 0x2c0 <LCDInit>

   //Clear the screen
   LCDClear();
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	7d d0       	rcall	.+250    	; 0x16a <LCDByte>

   //Simple string printing
   LCDWriteStringXY(0,0,"Congrats");
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	60 e0       	ldi	r22, 0x00	; 0
  74:	14 d1       	rcall	.+552    	; 0x29e <LCDGotoXY>
  76:	80 e6       	ldi	r24, 0x60	; 96
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	9e d0       	rcall	.+316    	; 0x1b8 <LCDWriteString>
   //LCDWriteString("Congrats ");

   //A string on line 2
   LCDWriteStringXY(0,1,"Loading ");
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	61 e0       	ldi	r22, 0x01	; 1
  80:	0e d1       	rcall	.+540    	; 0x29e <LCDGotoXY>
  82:	89 e6       	ldi	r24, 0x69	; 105
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	98 d0       	rcall	.+304    	; 0x1b8 <LCDWriteString>
  88:	c0 e0       	ldi	r28, 0x00	; 0
  8a:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	00 e0       	ldi	r16, 0x00	; 0
  8e:	10 e0       	ldi	r17, 0x00	; 0

   //Print some numbers
   for (i=0;i<99;i+=1)
   {
      LCDWriteIntXY(9,1,i,3);
  90:	89 e0       	ldi	r24, 0x09	; 9
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	04 d1       	rcall	.+520    	; 0x29e <LCDGotoXY>
  96:	ce 01       	movw	r24, r28
  98:	63 e0       	ldi	r22, 0x03	; 3
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	a5 d0       	rcall	.+330    	; 0x1e8 <LCDWriteInt>
      LCDWriteStringXY(12,1,"%");
  9e:	8c e0       	ldi	r24, 0x0C	; 12
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	fd d0       	rcall	.+506    	; 0x29e <LCDGotoXY>
  a4:	82 e7       	ldi	r24, 0x72	; 114
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	87 d0       	rcall	.+270    	; 0x1b8 <LCDWriteString>
  aa:	c8 01       	movw	r24, r16
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x4e>

   //A string on line 2
   LCDWriteStringXY(0,1,"Loading ");

   //Print some numbers
   for (i=0;i<99;i+=1)
  b0:	c8 01       	movw	r24, r16
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x54>
  b6:	c8 01       	movw	r24, r16
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x5a>
  bc:	c8 01       	movw	r24, r16
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x60>
  c2:	21 96       	adiw	r28, 0x01	; 1
  c4:	c3 36       	cpi	r28, 0x63	; 99
  c6:	d1 05       	cpc	r29, r1
  c8:	19 f7       	brne	.-58     	; 0x90 <main+0x32>
      _delay_loop_2(0);

   }

   //Clear the screen
   LCDClear();
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	4d d0       	rcall	.+154    	; 0x16a <LCDByte>

   //Some more text

   LCDWriteString("Hello world");
  d0:	84 e7       	ldi	r24, 0x74	; 116
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	71 d0       	rcall	.+226    	; 0x1b8 <LCDWriteString>
   LCDWriteStringXY(0,1,"By Shankar Kumar");    // <--- Write ur NAME HERE !!!!!!!!!!!
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	e1 d0       	rcall	.+450    	; 0x29e <LCDGotoXY>
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	6b d0       	rcall	.+214    	; 0x1b8 <LCDWriteString>
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	ca 01       	movw	r24, r20
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x8c>

   //Wait
   for(i=0;i<100;i++) _delay_loop_2(0);
  ee:	2f 5f       	subi	r18, 0xFF	; 255
  f0:	24 36       	cpi	r18, 0x64	; 100
  f2:	d1 f7       	brne	.-12     	; 0xe8 <main+0x8a>

   //Some More ......
   LCDClear();
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	38 d0       	rcall	.+112    	; 0x16a <LCDByte>
   LCDWriteString("Computronics");
  fa:	81 e9       	ldi	r24, 0x91	; 145
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	5c d0       	rcall	.+184    	; 0x1b8 <LCDWriteString>
   LCDWriteStringXY(0,1,"Lab");
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	cc d0       	rcall	.+408    	; 0x29e <LCDGotoXY>
 106:	8e e9       	ldi	r24, 0x9E	; 158
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	56 d0       	rcall	.+172    	; 0x1b8 <LCDWriteString>

}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
 116:	87 b3       	in	r24, 0x17	; 23
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
 11c:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
 11e:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	c4 9a       	sbi	0x18, 4	; 24
 12a:	82 2f       	mov	r24, r18
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 130:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 132:	82 95       	swap	r24
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	92 2f       	mov	r25, r18
 138:	9a 95       	dec	r25
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 13c:	c4 98       	cbi	0x18, 4	; 24
 13e:	92 2f       	mov	r25, r18
 140:	9a 95       	dec	r25
 142:	f1 f7       	brne	.-4      	; 0x140 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 144:	c4 9a       	sbi	0x18, 4	; 24
 146:	92 2f       	mov	r25, r18
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 14c:	96 b3       	in	r25, 0x16	; 22
 14e:	92 2f       	mov	r25, r18
 150:	9a 95       	dec	r25
 152:	f1 f7       	brne	.-4      	; 0x150 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 154:	c4 98       	cbi	0x18, 4	; 24
 156:	92 2f       	mov	r25, r18
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 15c:	87 fd       	sbrc	r24, 7
 15e:	e4 cf       	rjmp	.-56     	; 0x128 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 160:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 162:	87 b3       	in	r24, 0x17	; 23
 164:	8f 60       	ori	r24, 0x0F	; 15
 166:	87 bb       	out	0x17, r24	; 23

}
 168:	08 95       	ret

0000016a <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
 16a:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 16c:	66 23       	and	r22, r22
 16e:	11 f4       	brne	.+4      	; 0x174 <LCDByte+0xa>
	CLEAR_RS();
 170:	93 98       	cbi	0x12, 3	; 18
 172:	01 c0       	rjmp	.+2      	; 0x176 <LCDByte+0xc>
else
	SET_RS();
 174:	93 9a       	sbi	0x12, 3	; 18
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	82 2f       	mov	r24, r18
 17a:	8a 95       	dec	r24
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 17e:	c4 9a       	sbi	0x18, 4	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 180:	88 b3       	in	r24, 0x18	; 24
 182:	93 2f       	mov	r25, r19
 184:	92 95       	swap	r25
 186:	9f 70       	andi	r25, 0x0F	; 15
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 18c:	98 bb       	out	0x18, r25	; 24
 18e:	82 2f       	mov	r24, r18
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 194:	c4 98       	cbi	0x18, 4	; 24
 196:	82 2f       	mov	r24, r18
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 19c:	c4 9a       	sbi	0x18, 4	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 19e:	88 b3       	in	r24, 0x18	; 24
 1a0:	3f 70       	andi	r19, 0x0F	; 15
 1a2:	80 7f       	andi	r24, 0xF0	; 240
 1a4:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	82 2f       	mov	r24, r18
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 1ae:	c4 98       	cbi	0x18, 4	; 24
 1b0:	2a 95       	dec	r18
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 1b4:	b0 df       	rcall	.-160    	; 0x116 <LCDBusyLoop>
}
 1b6:	08 95       	ret

000001b8 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	ec 01       	movw	r28, r24
 1be:	0e c0       	rjmp	.+28     	; 0x1dc <LCDWriteString+0x24>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 1c0:	85 32       	cpi	r24, 0x25	; 37
 1c2:	49 f4       	brne	.+18     	; 0x1d6 <LCDWriteString+0x1e>
	{
		msg++;
 1c4:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 1c6:	88 81       	ld	r24, Y
 1c8:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 1ca:	88 30       	cpi	r24, 0x08	; 8
 1cc:	20 f0       	brcs	.+8      	; 0x1d6 <LCDWriteString+0x1e>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 1ce:	85 e2       	ldi	r24, 0x25	; 37
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	cb df       	rcall	.-106    	; 0x16a <LCDByte>
			LCDData(*msg);
 1d4:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	c8 df       	rcall	.-112    	; 0x16a <LCDByte>
	}
	msg++;
 1da:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 1dc:	88 81       	ld	r24, Y
 1de:	88 23       	and	r24, r24
 1e0:	79 f7       	brne	.-34     	; 0x1c0 <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	df 93       	push	r29
 1f2:	cf 93       	push	r28
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <LCDWriteInt+0xe>
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <LCDWriteInt+0x10>
 1f8:	0f 92       	push	r0
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	9c 01       	movw	r18, r24
 200:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 202:	fe 01       	movw	r30, r28
 204:	31 96       	adiw	r30, 0x01	; 1
 206:	85 e0       	ldi	r24, 0x05	; 5
 208:	df 01       	movw	r26, r30
 20a:	1d 92       	st	X+, r1
 20c:	8a 95       	dec	r24
 20e:	e9 f7       	brne	.-6      	; 0x20a <LCDWriteInt+0x22>
 210:	fe 01       	movw	r30, r28
 212:	35 96       	adiw	r30, 0x05	; 5
 214:	0b c0       	rjmp	.+22     	; 0x22c <LCDWriteInt+0x44>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 216:	c9 01       	movw	r24, r18
 218:	6a e0       	ldi	r22, 0x0A	; 10
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	8c d0       	rcall	.+280    	; 0x336 <__divmodhi4>
 21e:	80 83       	st	Z, r24
	val=val/10;
 220:	c9 01       	movw	r24, r18
 222:	6a e0       	ldi	r22, 0x0A	; 10
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	87 d0       	rcall	.+270    	; 0x336 <__divmodhi4>
 228:	9b 01       	movw	r18, r22
 22a:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 22c:	21 15       	cp	r18, r1
 22e:	31 05       	cpc	r19, r1
 230:	91 f7       	brne	.-28     	; 0x216 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 232:	bf ef       	ldi	r27, 0xFF	; 255
 234:	0f 3f       	cpi	r16, 0xFF	; 255
 236:	1b 07       	cpc	r17, r27
 238:	79 f4       	brne	.+30     	; 0x258 <LCDWriteInt+0x70>
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 23e:	ae 01       	movw	r20, r28
 240:	4f 5f       	subi	r20, 0xFF	; 255
 242:	5f 4f       	sbci	r21, 0xFF	; 255
 244:	02 c0       	rjmp	.+4      	; 0x24a <LCDWriteInt+0x62>
 246:	2f 5f       	subi	r18, 0xFF	; 255
 248:	3f 4f       	sbci	r19, 0xFF	; 255
 24a:	fa 01       	movw	r30, r20
 24c:	e2 0f       	add	r30, r18
 24e:	f3 1f       	adc	r31, r19
 250:	80 81       	ld	r24, Z
 252:	88 23       	and	r24, r24
 254:	c1 f3       	breq	.-16     	; 0x246 <LCDWriteInt+0x5e>
 256:	04 c0       	rjmp	.+8      	; 0x260 <LCDWriteInt+0x78>
	else
		j=5-field_length;
 258:	25 e0       	ldi	r18, 0x05	; 5
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	20 1b       	sub	r18, r16
 25e:	31 0b       	sbc	r19, r17
 260:	7e 01       	movw	r14, r28
 262:	08 94       	sec
 264:	e1 1c       	adc	r14, r1
 266:	f1 1c       	adc	r15, r1
 268:	e2 0e       	add	r14, r18
 26a:	f3 1e       	adc	r15, r19
 26c:	89 01       	movw	r16, r18
 26e:	08 c0       	rjmp	.+16     	; 0x280 <LCDWriteInt+0x98>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 270:	f7 01       	movw	r30, r14
 272:	81 91       	ld	r24, Z+
 274:	7f 01       	movw	r14, r30
 276:	80 5d       	subi	r24, 0xD0	; 208
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	77 df       	rcall	.-274    	; 0x16a <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 27c:	0f 5f       	subi	r16, 0xFF	; 255
 27e:	1f 4f       	sbci	r17, 0xFF	; 255
 280:	05 30       	cpi	r16, 0x05	; 5
 282:	11 05       	cpc	r17, r1
 284:	ac f3       	brlt	.-22     	; 0x270 <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	cf 91       	pop	r28
 292:	df 91       	pop	r29
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	08 95       	ret

0000029e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 29e:	84 31       	cpi	r24, 0x14	; 20
 2a0:	70 f4       	brcc	.+28     	; 0x2be <LCDGotoXY+0x20>

	#ifdef LCD_TYPE_204
	
	switch(y)
 2a2:	62 30       	cpi	r22, 0x02	; 2
 2a4:	31 f0       	breq	.+12     	; 0x2b2 <LCDGotoXY+0x14>
 2a6:	63 30       	cpi	r22, 0x03	; 3
 2a8:	31 f0       	breq	.+12     	; 0x2b6 <LCDGotoXY+0x18>
 2aa:	61 30       	cpi	r22, 0x01	; 1
 2ac:	29 f4       	brne	.+10     	; 0x2b8 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 2ae:	80 64       	ori	r24, 0x40	; 64
 2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 2b2:	8c 5e       	subi	r24, 0xEC	; 236
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 2b6:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 2b8:	80 68       	ori	r24, 0x80	; 128
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	56 df       	rcall	.-340    	; 0x16a <LCDByte>
 2be:	08 95       	ret

000002c0 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2c8:	8c e4       	ldi	r24, 0x4C	; 76
 2ca:	9d e1       	ldi	r25, 0x1D	; 29
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCDInit+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 2d0:	87 b3       	in	r24, 0x17	; 23
 2d2:	8f 60       	ori	r24, 0x0F	; 15
 2d4:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 2d6:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 2d8:	8b 9a       	sbi	0x11, 3	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 2da:	8e 9a       	sbi	0x11, 6	; 17

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 2dc:	88 b3       	in	r24, 0x18	; 24
 2de:	80 7f       	andi	r24, 0xF0	; 240
 2e0:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 2e2:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 2e4:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 2e6:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	98 2f       	mov	r25, r24
 2ec:	9a 95       	dec	r25
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCDInit+0x2c>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 2f0:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 2f2:	c1 9a       	sbi	0x18, 1	; 24
 2f4:	98 2f       	mov	r25, r24
 2f6:	9a 95       	dec	r25
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCDInit+0x36>
	_delay_us(1);
	CLEAR_E();
 2fa:	c4 98       	cbi	0x18, 4	; 24
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCDInit+0x3c>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 300:	0a df       	rcall	.-492    	; 0x116 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 302:	81 2f       	mov	r24, r17
 304:	8c 60       	ori	r24, 0x0C	; 12
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	30 df       	rcall	.-416    	; 0x16a <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 30a:	88 e2       	ldi	r24, 0x28	; 40
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	2d df       	rcall	.-422    	; 0x16a <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 310:	80 e4       	ldi	r24, 0x40	; 64
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	2a df       	rcall	.-428    	; 0x16a <LCDByte>
 316:	c2 ea       	ldi	r28, 0xA2	; 162
 318:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 31a:	89 91       	ld	r24, Y+
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	25 df       	rcall	.-438    	; 0x16a <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	c2 3e       	cpi	r28, 0xE2	; 226
 324:	d8 07       	cpc	r29, r24
 326:	c9 f7       	brne	.-14     	; 0x31a <LCDInit+0x5a>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	b8 df       	rcall	.-144    	; 0x29e <LCDGotoXY>

}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	08 95       	ret

00000336 <__divmodhi4>:
 336:	97 fb       	bst	r25, 7
 338:	09 2e       	mov	r0, r25
 33a:	07 26       	eor	r0, r23
 33c:	0a d0       	rcall	.+20     	; 0x352 <__divmodhi4_neg1>
 33e:	77 fd       	sbrc	r23, 7
 340:	04 d0       	rcall	.+8      	; 0x34a <__divmodhi4_neg2>
 342:	0c d0       	rcall	.+24     	; 0x35c <__udivmodhi4>
 344:	06 d0       	rcall	.+12     	; 0x352 <__divmodhi4_neg1>
 346:	00 20       	and	r0, r0
 348:	1a f4       	brpl	.+6      	; 0x350 <__divmodhi4_exit>

0000034a <__divmodhi4_neg2>:
 34a:	70 95       	com	r23
 34c:	61 95       	neg	r22
 34e:	7f 4f       	sbci	r23, 0xFF	; 255

00000350 <__divmodhi4_exit>:
 350:	08 95       	ret

00000352 <__divmodhi4_neg1>:
 352:	f6 f7       	brtc	.-4      	; 0x350 <__divmodhi4_exit>
 354:	90 95       	com	r25
 356:	81 95       	neg	r24
 358:	9f 4f       	sbci	r25, 0xFF	; 255
 35a:	08 95       	ret

0000035c <__udivmodhi4>:
 35c:	aa 1b       	sub	r26, r26
 35e:	bb 1b       	sub	r27, r27
 360:	51 e1       	ldi	r21, 0x11	; 17
 362:	07 c0       	rjmp	.+14     	; 0x372 <__udivmodhi4_ep>

00000364 <__udivmodhi4_loop>:
 364:	aa 1f       	adc	r26, r26
 366:	bb 1f       	adc	r27, r27
 368:	a6 17       	cp	r26, r22
 36a:	b7 07       	cpc	r27, r23
 36c:	10 f0       	brcs	.+4      	; 0x372 <__udivmodhi4_ep>
 36e:	a6 1b       	sub	r26, r22
 370:	b7 0b       	sbc	r27, r23

00000372 <__udivmodhi4_ep>:
 372:	88 1f       	adc	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	5a 95       	dec	r21
 378:	a9 f7       	brne	.-22     	; 0x364 <__udivmodhi4_loop>
 37a:	80 95       	com	r24
 37c:	90 95       	com	r25
 37e:	bc 01       	movw	r22, r24
 380:	cd 01       	movw	r24, r26
 382:	08 95       	ret

00000384 <_exit>:
 384:	f8 94       	cli

00000386 <__stop_program>:
 386:	ff cf       	rjmp	.-2      	; 0x386 <__stop_program>
