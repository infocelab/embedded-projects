
atmega8_with_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000000ce  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005f  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000015b  00000000  00000000  000001d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000cb  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000015d  00000000  00000000  000003fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000cc  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000004e  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ec       	ldi	r30, 0xCE	; 206
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 37       	cpi	r26, 0x74	; 116
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	22 d0       	rcall	.+68     	; 0x9e <main>
  5a:	37 c0       	rjmp	.+110    	; 0xca <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <lcd_cmd>:
{
 


//Put command on the Data Bus
  PORTB = command;
  5e:	88 bb       	out	0x18, r24	; 24

  //Enable LCD for command writing
  PORTD = 0b00010000;
  60:	80 e1       	ldi	r24, 0x10	; 16
  62:	82 bb       	out	0x12, r24	; 18

  //Allow delay for LCD to read the databus
  delay(1);

  //Disable LCD again
  PORTD = 0b00000000;
  64:	12 ba       	out	0x12, r1	; 18

  //Allow some more delay
  delay(1);
}
  66:	08 95       	ret

00000068 <lcd_data>:

//Function for sending Data to LCD
void lcd_data(unsigned char data)
{
  //Put data on Data Bus
  PORTB= data;
  68:	88 bb       	out	0x18, r24	; 24


  //Set R/S (Regiter Select) to High, and Enable to High
  PORTD = 0b00110000;
  6a:	80 e3       	ldi	r24, 0x30	; 48
  6c:	82 bb       	out	0x12, r24	; 18

  //Allow for delay
  delay(1);

  //Disable LCD again
  PORTD = 0b00100000;
  6e:	80 e2       	ldi	r24, 0x20	; 32
  70:	82 bb       	out	0x12, r24	; 18

  //Allow for some more delay
  delay(1);
}
  72:	08 95       	ret

00000074 <lcd_send_string>:


//Function to send String to LCD
void lcd_send_string(char* string)
{
  74:	cf 93       	push	r28
  76:	df 93       	push	r29
  78:	ec 01       	movw	r28, r24
  7a:	02 c0       	rjmp	.+4      	; 0x80 <lcd_send_string+0xc>
  while(*string)
{
  //Send value of pointer as data to LCD
  lcd_data(*string);
  7c:	f5 df       	rcall	.-22     	; 0x68 <lcd_data>
  //Increment string pointer
  string++;
  7e:	21 96       	adiw	r28, 0x01	; 1


//Function to send String to LCD
void lcd_send_string(char* string)
{
  while(*string)
  80:	88 81       	ld	r24, Y
  82:	88 23       	and	r24, r24
  84:	d9 f7       	brne	.-10     	; 0x7c <lcd_send_string+0x8>
  //Send value of pointer as data to LCD
  lcd_data(*string);
  //Increment string pointer
  string++;
  }
}
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	08 95       	ret

0000008c <init_lcd>:

//Function to Initilise LCD
void init_lcd()
{
  //Setup both lines of LCD
  lcd_cmd(0x38);
  8c:	88 e3       	ldi	r24, 0x38	; 56
  8e:	e7 df       	rcall	.-50     	; 0x5e <lcd_cmd>
  //Set Cursor off - Enable LCD
  lcd_cmd(0x0E);
  90:	8e e0       	ldi	r24, 0x0E	; 14
  92:	e5 df       	rcall	.-54     	; 0x5e <lcd_cmd>
  //Clear Screen
  lcd_cmd(0x01);
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	e3 df       	rcall	.-58     	; 0x5e <lcd_cmd>
  //Goto first position
  lcd_cmd(0x80);
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	e1 df       	rcall	.-62     	; 0x5e <lcd_cmd>
}
  9c:	08 95       	ret

0000009e <main>:

//Main Code 

int main()
{
DDRB=0xff;    //set PORTB as out put
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
  
  DDRD=0b01110000;   //Set PD.4,5 and 6 as Output
  a2:	80 e7       	ldi	r24, 0x70	; 112
  a4:	81 bb       	out	0x11, r24	; 17


  //Give Inital Delay for LCD to startup as LCD is a slower Device
  delay(2);

  init_lcd();
  a6:	f2 df       	rcall	.-28     	; 0x8c <init_lcd>
while(1)
    {

        
            
   lcd_cmd(0x80);       //Goto Line-1,first position 
  a8:	80 e8       	ldi	r24, 0x80	; 128
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	d8 df       	rcall	.-80     	; 0x5e <lcd_cmd>
  lcd_send_string("WELCOME TO! ");
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	e0 df       	rcall	.-64     	; 0x74 <lcd_send_string>


   lcd_cmd(0xC0);      //Goto Line-2, first position     
  b4:	80 ec       	ldi	r24, 0xC0	; 192
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	d2 df       	rcall	.-92     	; 0x5e <lcd_cmd>

   lcd_send_string("CELAB:");
  ba:	8d e6       	ldi	r24, 0x6D	; 109
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	da df       	rcall	.-76     	; 0x74 <lcd_send_string>
   lcd_cmd(0x01);     //Clear the lcd
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	cc df       	rcall	.-104    	; 0x5e <lcd_cmd>
  c6:	f0 cf       	rjmp	.-32     	; 0xa8 <main+0xa>

000000c8 <delay>:
{
int i,j;
for(i=0;i<=dtime;i++)
{
for(j=0;j<5000;j++);
}}
  c8:	08 95       	ret

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
